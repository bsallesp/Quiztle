// <auto-generated />
using System;
using Quiztle.DataContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Quiztle.DataContext.Migrations
{
    [DbContext(typeof(PostgreQuiztleContext))]
    [Migration("20240601141830_firstOne")]
    partial class firstOne
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Quiztle.CoreBusiness.Entities.Course.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "Id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "Created");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "Name");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("Quiztle.CoreBusiness.Entities.Course.Chapter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "Id");

                    b.Property<Guid?>("BookId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "Created");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "Name");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("Chapters");

                    b.HasAnnotation("Relational:JsonPropertyName", "Chapters");
                });

            modelBuilder.Entity("Quiztle.CoreBusiness.Entities.Course.Content", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "Id");

                    b.Property<string>("Text")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "Text");

                    b.HasKey("Id");

                    b.ToTable("Contents");

                    b.HasAnnotation("Relational:JsonPropertyName", "Content");
                });

            modelBuilder.Entity("Quiztle.CoreBusiness.Entities.Course.Section", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "Id");

                    b.Property<Guid?>("ChapterId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "Created");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "Name");

                    b.HasKey("Id");

                    b.HasIndex("ChapterId");

                    b.HasIndex("ContentId");

                    b.ToTable("Sections");

                    b.HasAnnotation("Relational:JsonPropertyName", "Sections");
                });

            modelBuilder.Entity("Quiztle.CoreBusiness.Entities.PDFData.PDFData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "Id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "Created");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "Description");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "FileName");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "Name");

                    b.HasKey("Id");

                    b.ToTable("PDFData");
                });

            modelBuilder.Entity("Quiztle.CoreBusiness.Entities.PDFData.PDFDataPages", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "Id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "Content");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "Created");

                    b.Property<Guid?>("PDFDataId")
                        .HasColumnType("uuid");

                    b.Property<int>("Page")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "Page");

                    b.HasKey("Id");

                    b.HasIndex("PDFDataId");

                    b.ToTable("PDFDataPages");

                    b.HasAnnotation("Relational:JsonPropertyName", "Pages");
                });

            modelBuilder.Entity("Quiztle.CoreBusiness.Entities.Quiz.Option", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "Id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "Created");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "IsCorrect");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "Name");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "QuestionId");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Options");

                    b.HasAnnotation("Relational:JsonPropertyName", "Option");
                });

            modelBuilder.Entity("Quiztle.CoreBusiness.Entities.Quiz.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "Id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "Created");

                    b.Property<string>("Hint")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "Hint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "Name");

                    b.Property<string>("Resolution")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "Resolution");

                    b.Property<Guid?>("SectionId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TestId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SectionId");

                    b.HasIndex("TestId");

                    b.ToTable("Questions");

                    b.HasAnnotation("Relational:JsonPropertyName", "Questions");
                });

            modelBuilder.Entity("Quiztle.CoreBusiness.Entities.Quiz.Response", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ShotId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TestId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ShotId");

                    b.HasIndex("TestId");

                    b.ToTable("Responses");
                });

            modelBuilder.Entity("Quiztle.CoreBusiness.Entities.Quiz.Shot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "Id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "Created");

                    b.Property<Guid>("OptionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OptionId");

                    b.ToTable("Shots");
                });

            modelBuilder.Entity("Quiztle.CoreBusiness.Entities.Quiz.Test", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "Id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "Created");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "Name");

                    b.Property<Guid>("PDFDataId")
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "PDFDataId");

                    b.HasKey("Id");

                    b.HasIndex("PDFDataId");

                    b.ToTable("Tests");

                    b.HasAnnotation("Relational:JsonPropertyName", "Tests");
                });

            modelBuilder.Entity("Quiztle.CoreBusiness.Entities.Tasks.BookTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("BookTasks");
                });

            modelBuilder.Entity("Quiztle.CoreBusiness.Log.AILog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "Id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "Created");

                    b.Property<string>("JSON")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "JSON");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "Name");

                    b.HasKey("Id");

                    b.ToTable("AILogs");
                });

            modelBuilder.Entity("Quiztle.CoreBusiness.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PhoneNumber")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Quiztle.CoreBusiness.Entities.Course.Chapter", b =>
                {
                    b.HasOne("Quiztle.CoreBusiness.Entities.Course.Book", null)
                        .WithMany("Chapters")
                        .HasForeignKey("BookId");
                });

            modelBuilder.Entity("Quiztle.CoreBusiness.Entities.Course.Section", b =>
                {
                    b.HasOne("Quiztle.CoreBusiness.Entities.Course.Chapter", null)
                        .WithMany("Sections")
                        .HasForeignKey("ChapterId");

                    b.HasOne("Quiztle.CoreBusiness.Entities.Course.Content", "Content")
                        .WithMany()
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Content");
                });

            modelBuilder.Entity("Quiztle.CoreBusiness.Entities.PDFData.PDFDataPages", b =>
                {
                    b.HasOne("Quiztle.CoreBusiness.Entities.PDFData.PDFData", null)
                        .WithMany("Pages")
                        .HasForeignKey("PDFDataId");
                });

            modelBuilder.Entity("Quiztle.CoreBusiness.Entities.Quiz.Option", b =>
                {
                    b.HasOne("Quiztle.CoreBusiness.Entities.Quiz.Question", "Question")
                        .WithMany("Options")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Quiztle.CoreBusiness.Entities.Quiz.Question", b =>
                {
                    b.HasOne("Quiztle.CoreBusiness.Entities.Course.Section", null)
                        .WithMany("Questions")
                        .HasForeignKey("SectionId");

                    b.HasOne("Quiztle.CoreBusiness.Entities.Quiz.Test", null)
                        .WithMany("Questions")
                        .HasForeignKey("TestId");
                });

            modelBuilder.Entity("Quiztle.CoreBusiness.Entities.Quiz.Response", b =>
                {
                    b.HasOne("Quiztle.CoreBusiness.Entities.Quiz.Shot", "Shot")
                        .WithMany()
                        .HasForeignKey("ShotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Quiztle.CoreBusiness.Entities.Quiz.Test", "Test")
                        .WithMany()
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shot");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("Quiztle.CoreBusiness.Entities.Quiz.Shot", b =>
                {
                    b.HasOne("Quiztle.CoreBusiness.Entities.Quiz.Option", "Option")
                        .WithMany()
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Option");
                });

            modelBuilder.Entity("Quiztle.CoreBusiness.Entities.Quiz.Test", b =>
                {
                    b.HasOne("Quiztle.CoreBusiness.Entities.PDFData.PDFData", null)
                        .WithMany("Tests")
                        .HasForeignKey("PDFDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Quiztle.CoreBusiness.Entities.Tasks.BookTask", b =>
                {
                    b.HasOne("Quiztle.CoreBusiness.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Quiztle.CoreBusiness.Entities.Course.Book", b =>
                {
                    b.Navigation("Chapters");
                });

            modelBuilder.Entity("Quiztle.CoreBusiness.Entities.Course.Chapter", b =>
                {
                    b.Navigation("Sections");
                });

            modelBuilder.Entity("Quiztle.CoreBusiness.Entities.Course.Section", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Quiztle.CoreBusiness.Entities.PDFData.PDFData", b =>
                {
                    b.Navigation("Pages");

                    b.Navigation("Tests");
                });

            modelBuilder.Entity("Quiztle.CoreBusiness.Entities.Quiz.Question", b =>
                {
                    b.Navigation("Options");
                });

            modelBuilder.Entity("Quiztle.CoreBusiness.Entities.Quiz.Test", b =>
                {
                    b.Navigation("Questions");
                });
#pragma warning restore 612, 618
        }
    }
}
