@page "/Buy"
@page "/Buy/{priceId}/testid/{testId}"

@using Microsoft.AspNetCore.Authorization
@using Quiztle.CoreBusiness.Entities.Paid
@using Quiztle.Frontend.Client.APIServices
@using Quiztle.Frontend.Client.APIServices.StripeService

@inject StripeSessionsService StripeSessionsService
@inject StripeCustomerService StripeCustomerService
@inject GetUserInfos GetUserInfos
@inject PaidService PaidService

@attribute [Authorize]

@code {
    [Parameter]
    public string priceId { get; set; } = "";

    [Parameter]
    public string testId { get; set; } = "";

    private bool isDone = false;

    private string _finalURL = "";

    protected override async Task OnParametersSetAsync()
    {
        Paid paid = new()
            {
                UserEmail = await GetUserInfos.GetUserEmail(),
                PriceId = priceId
            };


        if (!(await PaidService.IsPaidService(paid)))
        {
            Console.WriteLine("Not paid yet.");
            Console.WriteLine("Getting new session....");

            var sessionStartDTO = new SessionStartDTO
                {
                    Email = paid.UserEmail,
                    PriceId = paid.PriceId
                };

            var sessionURL = await StripeSessionsService.CreateSession(sessionStartDTO);

            Console.WriteLine("New session...." + sessionURL);

            Nav.NavigateTo(sessionURL, true);
        }
    }

    // protected override void OnAfterRender(bool firstRender)
    // {
    //     Nav.NavigateTo("/");

    //     base.OnAfterRender(firstRender);
    // }

    // private async Task<bool> CheckListToBuy()
    // {
    //     if (string.IsNullOrEmpty(priceId)) return false;

    //     var claims = await GetUserInfos.GetUserNameAndEmail();

    //     if (string.IsNullOrEmpty(claims["Email"])) return false;

    //     var customerId = await StripeCustomerService.SearchCustomerIdByEmail(claims["Email"]);

    //     if (await StripeSessionsService.IsPaidSessionByCustomer(customerId, priceId)) return false;

    //     if (string.IsNullOrEmpty(customerId))
    //         customerId = await StripeCustomerService.CreateCustomer(claims["Name"] ?? "", claims["Email"]);

    //     var session = await StripeSessionsService.CreateSession(priceId, customerId, claims["Email"]);

    //     if (string.IsNullOrEmpty(session)) return false;

    //     _finalURL = session;
    //     return true;
    // }
}
