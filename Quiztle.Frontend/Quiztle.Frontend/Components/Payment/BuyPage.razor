@page "/Buy/TestId/{TestId}"

@using Microsoft.AspNetCore.Authorization
@using Quiztle.Blazor.Client.APIServices
@using Quiztle.CoreBusiness.Entities.Paid
@using Quiztle.CoreBusiness.Entities.Quiz
@using Quiztle.Frontend.Client.APIServices
@using Quiztle.Frontend.Client.APIServices.StripeService

@inject StripeSessionsService StripeSessionsService
@inject StripeCustomerService StripeCustomerService
@inject GetUserInfos GetUserInfos
@inject PaidService PaidService
@inject GetTestByIdService GetTestByIdService

@rendermode @(new InteractiveServerRenderMode(false))

@code {
    [Parameter] public string PriceId { get; set; } = "";
    [Parameter] public string TestId { get; set; } = "";
    private readonly TestDTO _testDto = new TestDTO();
    private bool HasPaid { get; set; } = false;
    private string _finalUrl = "";

    protected override async Task OnParametersSetAsync()
    {
        if (string.IsNullOrEmpty(TestId)) Nav.NavigateTo("/Error");

        HasPaid = await PaidService.IsPaidService(new Paid()
        {
            TestId = TestId,
            UserEmail = await GetUserInfos.GetUserEmail()
        });

        if (HasPaid)
        {
            Console.WriteLine("paid....");
            Nav.NavigateTo($"/Games/Arcade/{TestId}");
        }
        else
        {
            Console.WriteLine("not paid....");
            await CreateSession();
        }
    }

    private async Task CreateSession()
    {
        var email = await GetUserInfos.GetUserEmail();
        var test = await GetTestByIdService.ExecuteAsync(Guid.Parse(TestId));

        Console.WriteLine(test.Data.PriceId);
        
        _finalUrl = await StripeSessionsService.CreateSession(new SessionStartDTO()
        {
            TestId = TestId,
            PriceId = test.Data.PriceId,
            Email = email,
            Amount = test.Data.PriceInCents
        });

        Console.WriteLine($"Final url: {_finalUrl}");
        
        Nav.NavigateTo(_finalUrl, true);
    }
}