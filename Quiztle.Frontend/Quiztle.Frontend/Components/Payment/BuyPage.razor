@page "/Buy/TestId/{TestId}"

@using Microsoft.AspNetCore.Authorization
@using Quiztle.CoreBusiness.Entities.Paid
@using Quiztle.Frontend.Client.APIServices
@using Quiztle.Frontend.Client.APIServices.StripeService
@using Quiztle.Frontend.Client.Utils.LoadingScreen

@inject StripeSessionsService StripeSessionsService
@inject StripeCustomerService StripeCustomerService
@inject GetUserInfos GetUserInfos
@inject PaidService PaidService

@rendermode InteractiveServer

@if (ShowLoadingScreen)
{
    <LoadingScreenComponent></LoadingScreenComponent>
}

@code {
    [Parameter] public string TestId { get; set; } = "";
    private string _finalUrl = "";
    private const bool ShowLoadingScreen = true;

    protected override Task OnParametersSetAsync()
    {
        _ = CreateSession();
        return base.OnParametersSetAsync();
    }
    

    private async Task CreateSession()
    {
        try
        {
            var email = await GetUserInfos.GetUserEmail();
            var test = await GetTestByIdService.ExecuteAsync(Guid.Parse(TestId));

            var sessionStartDto = new SessionStartDTO
            {
                Email = email,
                PriceId = test.Data.PriceId,
                TestId = test.Data.Id.ToString()
            };

            var sessionUrl = await StripeSessionsService.CreateSession(sessionStartDto);

            Console.WriteLine("Session url " + sessionUrl + "------------------------");
            
            _finalUrl = sessionUrl;
            Nav.NavigateTo(sessionUrl);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }
}