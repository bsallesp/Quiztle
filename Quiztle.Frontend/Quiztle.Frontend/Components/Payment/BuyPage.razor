@page "/Buy/TestId/{TestId}"

@using Microsoft.AspNetCore.Authorization
@using Quiztle.Blazor.Client.APIServices
@using Quiztle.CoreBusiness.Entities.Paid
@using Quiztle.CoreBusiness.Entities.Quiz
@using Quiztle.CoreBusiness.Log
@using Quiztle.Frontend.Client.APIServices
@using Quiztle.Frontend.Client.APIServices.StripeService

@inject StripeSessionsService StripeSessionsService
@inject StripeCustomerService StripeCustomerService
@inject GetUserInfos GetUserInfos
@inject PaidService PaidService
@inject GetTestByIdService GetTestByIdService

@rendermode @(new InteractiveServerRenderMode(false))
@attribute [Authorize]

@code {
    [Parameter] public string TestId { get; set; } = "";
    private bool HasPaid { get; set; } = false;
    private string _finalUrl = "";
    private Guid _logGuid;
    private Paid _paidAttempt = new Paid();

    protected override async Task OnParametersSetAsync()
    {
        _logGuid = Guid.NewGuid();
        
        var test = await GetTestByIdService.ExecuteAsync(Guid.Parse(TestId));
        _paidAttempt = new Paid()
        {
            TestId = test.Data.Id.ToString(),
            PriceId = test.Data.PriceId,
            Amount = test.Data.PriceInCents,
            UserEmail = await GetUserInfos.GetUserEmail()
        };
        
        await CreateLogService.ExecuteAsync(new Log
        {
            GuidLog = _logGuid,
            Content = $"{_paidAttempt.ToJson()}",
            Name = "BuyPage / Start"
        });

        if (!_paidAttempt.IsValid())
        {
            await CreateLogService.ExecuteAsync(new Log
            {
                GuidLog = _logGuid,
                Content = $"Cannot mount Paid Attempt: {_paidAttempt.ToJson()}",
                Name = "BuyPage / StartError"
            });
            Nav.NavigateTo("/error");
        }
        try
        {
            HasPaid = await PaidService.IsPaidService(_paidAttempt);

            if (HasPaid) Nav.NavigateTo($"/Games/Arcade/{TestId}");
            else await CreateSession();
        }
        
        catch (Exception e)
        {
            var logEntry = new Log
            {
                GuidLog = _logGuid,
                Content = $"Exception Message: {e.Message}, StackTrace: {e.StackTrace}, InnerException: {e.InnerException?.Message ?? "N/A"}",
                Name = "BuyPage / Paid Error"
            };
            await CreateLogService.ExecuteAsync(logEntry);
        }
    }

    private async Task CreateSession()
    {
        try
        {
            _finalUrl = await StripeSessionsService.CreateSession(_paidAttempt.ToSessionStartDTO());
            Nav.NavigateTo(_finalUrl, true);
        }
        catch (Exception e)
        {
            var logEntry = new Log
            {
                GuidLog = _logGuid,
                Content = $"Exception Message: {e.Message}, StackTrace: {e.StackTrace}, InnerException: {e.InnerException?.Message ?? "N/A"}",
                Name = "BuyPage / Paid Error"
            };
            await CreateLogService.ExecuteAsync(logEntry);
        }
    }
}