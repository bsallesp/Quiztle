@page "/Buy"
@page "/Buy/{priceId}/testid/{testId}"

@using Microsoft.AspNetCore.Authorization
@using Quiztle.CoreBusiness.Entities.Paid
@using Quiztle.Frontend.Client.APIServices
@using Quiztle.Frontend.Client.APIServices.StripeService

@inject StripeSessionsService StripeSessionsService
@inject StripeCustomerService StripeCustomerService
@inject GetUserInfos GetUserInfos
@inject PaidService PaidService

@code {
    [Parameter]
    public string priceId { get; set; } = "";

    [Parameter]
    public string testId { get; set; } = "";

    private string _finalURL = "";


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var result = await IsPaid();

        if (result == "NotLogged")
        {
            Nav.NavigateTo("/Login", true);
        }

        if (result == "NotPaid")
        {
            Nav.NavigateTo(_finalURL);
        }

        if (result == "Paid")
        {
            Nav.NavigateTo("/Play");
        }
        
        base.OnAfterRender(firstRender);
    }

    private async Task<string> IsPaid()
    {
        var email = await GetUserInfos.GetUserEmail();
        if (string.IsNullOrEmpty(email)) return "NotLogged";

        Paid paid = new()
            {
                UserEmail = email,
                PriceId = priceId
            };


        if (!(await PaidService.IsPaidService(paid)))
        {
            var sessionStartDTO = new SessionStartDTO
                {
                    Email = paid.UserEmail,
                    PriceId = paid.PriceId
                };

            var sessionURL = await StripeSessionsService.CreateSession(sessionStartDTO);

            _finalURL = sessionURL;
            return "NotPaid";
        }

        return "Paid";
    }
}
