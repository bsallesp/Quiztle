@page "/Buy"
@page "/Buy/{priceId}/testid/{testId}"

@using Microsoft.AspNetCore.Authorization
@using Quiztle.Frontend.Client.APIServices.StripeService

@inject StripeSessionsService StripeSessionsService
@inject StripeCustomerService StripeCustomerService
@inject GetUserInfos GetUserInfos

@attribute [Authorize]

@if(!isDone){
    <h1>
        Looks you already have it.
    </h1>
    <h1>
        Looks you already have it.
    </h1>
    <h1>
        Looks you already have it.
    </h1>
        <h1>
        Looks you already have it.
    </h1>
    <h1>
        Looks you already have it.
    </h1>

}


@code {
    [Parameter]
    public string priceId { get; set; } = "";

    [Parameter]
    public string testId { get; set; } = "";

    private bool isDone = false;

    private string _finalURL = "";

    protected override async Task OnParametersSetAsync()
    {
        if (await CheckListToBuy()) Nav.NavigateTo(_finalURL);
        isDone = true;
        Console.WriteLine();
        StateHasChanged();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        
        
        base.OnAfterRender(firstRender);
    }

    private async Task<bool> CheckListToBuy()
    {
        if (string.IsNullOrEmpty(priceId)) return false;

        var claims = await GetUserInfos.GetUserNameAndEmail();

        if (string.IsNullOrEmpty(claims["Email"])) return false;

        var customerId = await StripeCustomerService.SearchCustomerIdByEmail(claims["Email"]);

        if (await StripeSessionsService.IsPaidSessionByCustomer(customerId, priceId)) return false;

        if (string.IsNullOrEmpty(customerId))
            customerId = await StripeCustomerService.CreateCustomer(claims["Name"] ?? "", claims["Email"]);

        var session = await StripeSessionsService.CreateSession(priceId, customerId, claims["Email"]);

        if (string.IsNullOrEmpty(session)) return false;

        _finalURL = session;
        return true;
    }
}
