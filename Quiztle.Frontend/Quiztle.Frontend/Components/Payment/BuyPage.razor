@page "/Buy/TestId/{TestId}"

@using Microsoft.AspNetCore.Authorization
@using Quiztle.CoreBusiness.Entities.Paid
@using Quiztle.Frontend.Client.APIServices
@using Quiztle.Frontend.Client.APIServices.StripeService

@inject StripeSessionsService StripeSessionsService
@inject StripeCustomerService StripeCustomerService
@inject GetUserInfos GetUserInfos
@inject PaidService PaidService

@rendermode @(new InteractiveServerRenderMode(false))

<div class="container-lg p2">
    <h1>Pay</h1>

    <form method="post" @onsubmit="CreateSession" @formname="create-session-and-pay">
        <AntiforgeryToken />
        <div>
            <button type="submit">Submit</button>
        </div>
    </form>
</div>

@code {
    [Parameter]
    public string PriceId { get; set; } = "";

    [Parameter]
    public string TestId { get; set; } = "";

    private string _finalUrl = "";

    protected override async Task OnParametersSetAsync()
    {
        var hasPaid = await PaidService.IsPaidService(new Paid()
        {
            TestId = TestId,
            UserEmail = await GetUserInfos.GetUserEmail()
        });

        if (hasPaid) PayedAlreadyWarning();
        else await CreateSession();
    }

    private void PayedAlreadyWarning()
    {
        Console.WriteLine("PayedAlreadyWarning");
    }

    private async Task CreateSession()
    {
        var email = await GetUserInfos.GetUserEmail();
        var paidsRegister = await PaidService.GetPaidByEmailService(email);
        
        
        var sessionURL = await StripeSessionsService.CreateSession(new SessionStartDTO()
        {
            TestId = TestId,
            PriceId = paidsRegister.FirstOrDefault().PriceId,
            Email = email
        });

        Console.WriteLine(sessionURL);
        
        // _finalUrl = sessionURL;
        // Nav.NavigateTo(sessionURL);
    }
}
