@* @page "/AuthUser/Login" *@
@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using Quiztle.Frontend.Components.Account.Shared
@using Quiztle.Frontend.Data
@using System.Security.Claims

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject Quiztle.Frontend.Components.Account.IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>

<AuthorizeView>
    <NotAuthorized Context="notAuthContext">
        <MudContainer Class="mt-16 text-center" MaxWidth="MaxWidth.Small">
            <h1>Log in</h1>
            <div>
                <section>
                    <StatusMessage Message="@errorMessage"/>
                </section>
            </div>
            <div>
                <section>
                    <ExternalLoginPicker/>
                </section>
                <div>
                    <p>
                        <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Register as a new user</a>
                    </p>
                </div>
            </div>
            <MudAlert
                Style="margin: 20px 10px"
                Severity="Severity.Info"
                Variant="Variant.Outlined">
                <p class="mb-0">
                    For now, to ensure the security of the application, all authentication will be handled exclusively through Google.
                </p>
            </MudAlert>
        </MudContainer>
    </NotAuthorized>
</AuthorizeView>

@code {
    private string? errorMessage;

    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            var profileUrl = new Uri(new Uri(NavigationManager.BaseUri), "profile").ToString();
            NavigationManager.NavigateTo(profileUrl);
        }

        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required] [EmailAddress] public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")] public bool RememberMe { get; set; }
    }

}