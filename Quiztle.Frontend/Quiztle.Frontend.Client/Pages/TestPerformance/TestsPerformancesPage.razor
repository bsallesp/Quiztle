@page "/TestPerformances"
@rendermode InteractiveAuto

@using Microsoft.AspNetCore.Authorization
@using Quiztle.CoreBusiness.DTOs
@using Quiztle.CoreBusiness.Entities.Paid
@using Quiztle.CoreBusiness.Entities.Performance
@using Quiztle.Frontend.Client.APIServices
@using Quiztle.Frontend.Client.APIServices.Performance
@using Quiztle.Frontend.Client.Utils
@using Quiztle.Frontend.Client.Utils.Components

@inject GetUserInfos GetUserInfos
@inject GetTestPerformancesByUserIdService GetTestPerformancesByUserIdService
@inject PaidService PaidService

@attribute [Authorize]


@if (_testPerformances != null && _hasPaid)
{
    <div class="full-screen-container">
        <div class="greeting">
            Hi, @GetUserInfos.GetUserEmail().Result!
        </div>
        <div class="test-performances-container text-center">
            @foreach (var groupedPerformances in _setGroupedTestPerformanceDTO.GroupedPerformances)
            {
                <div class="performance-card text-center">

                    <div class="card-content">

                        <ShieldComponent fileName="@groupedPerformances.Performances.First().Shield">
                        </ShieldComponent>

                        <div class="text-center p-4">
                            <h2 class="">
                                @groupedPerformances.TestName
                            </h2>
                        </div>

                        <div class="performance-card">

                            <h2 style="padding:5px;">
                                Overall Statistics:
                            </h2>

                            <h3 style="padding:5px;">
                                Total practice tests: @groupedPerformances.Performances.Count()
                            </h3>

                            <h4 class="text-center">
                                @groupedPerformances.TotalHits()
                                of
                                @groupedPerformances.TotalProbla()
                                questions: @groupedPerformances.MediaScore().ToString("00.00")%
                            </h4>

                            <PerformanceBarComponent
                                heightBar="15"
                                goodNumber="@groupedPerformances.TotalHits()"
                                badNumber="@groupedPerformances.TotalMiss()"
                                showFinalScore="false">
                            </PerformanceBarComponent>
                        </div>

                        <div class="performance-card">
                            <h2>
                                Statistics by practice test
                            </h2>
                            <span>
                                coming soon
                            </span>

                            @*                             <PerformanceByTestComponent>

                            </PerformanceByTestComponent>

                            <MudButton OnClick="OnExpandCollapseClick">@(_expanded ? "Collapse" : "Expand")</MudButton>
                            <MudCollapse Expanded="_expanded">

                                @foreach (var testPerformance in groupedPerformances.Performances)
                                {
                                    <div class="test-performance-card">

                                        <div class="text-center">
                                            <h6>
                                                @testPerformance.CorrectAnswers of @testPerformance.TotalOptions(): @testPerformance.Score%
                                            </h6>
                                            <span>
                                                @testPerformance.Created.ToString("dd/MM HH:mm")
                                            </span>
                                        </div>

                                        @foreach (var report in testPerformance.ReportsByTag())
                                        {

                                            <div class="performance-card">
                                                <PerformanceBarComponent goodNumber="@report.CorrectAmount"
                                                                         badNumber="@report.IncorrectAmount"
                                                                         showText="true"
                                                                         title="@report.Tag"
                                                                         showTitle="true"
                                                                         showBadNumber="true"
                                                                         showGoodNumber="true"
                                                                         showFinalScore="true"
                                                                         heightBar="10"></PerformanceBarComponent>
                                            </div>
                                        }
                                    </div>
                                }

                            </MudCollapse> *@
                        </div>

                        <div class="performance-card">
                            <h2>
                                Statistics by Topic
                            </h2>
                            <span>
                                coming soon
                            </span>
                        </div>
                    </div>

                </div>
            }
        </div>
    </div>
}

@code {
    private IEnumerable<TestPerformance> _testPerformances = [];
    private SetGroupedPerformancesDTO _setGroupedTestPerformanceDTO = new();

    private string _userId = "";
    private bool _hasPaid = false;

    protected override async Task OnParametersSetAsync()
    {
        _userId = await GetUserInfos.GetUserId();
        _testPerformances = await GetTestPerformancesByUserIdService.ExecuteAsync(Guid.Parse(_userId));
        var testPerformances = _testPerformances as TestPerformance[] ?? _testPerformances.ToArray();
        _setGroupedTestPerformanceDTO.GroupAndFill(testPerformances);

        _hasPaid = await PaidService.IsPaidService(new Paid()
        {
            UserEmail = await GetUserInfos.GetUserEmail(),
            TestId = testPerformances.FirstOrDefault()?.TestId.ToString()
        });
        
        if(!_hasPaid) Nav.NavigateTo($"/Buy/TestId/{_testPerformances.FirstOrDefault().TestId}");
    }

    bool _expanded = false;

    private void OnExpandCollapseClick()
    {
        _expanded = !_expanded;
    }
}