@page "/TestPerformances"
@rendermode InteractiveAuto

@using Microsoft.AspNetCore.Authorization
@using Quiztle.CoreBusiness.DTOs
@using Quiztle.CoreBusiness.Entities.Performance
@using Quiztle.Frontend.Client.APIServices.Performance
@using Quiztle.Frontend.Client.Utils

@inject GetUserInfos GetUserInfos
@inject GetTestPerformancesByUserIdService GetTestPerformancesByUserIdService
@attribute [Authorize]

@if (_testPerformances != null)
{
    <div class="full-screen-container">
        <div class="greeting">
            Hi, @GetUserInfos.GetUserNameOrEmail().Result!
        </div>
        <div class="test-performances-container">
            @foreach (var groupedPerformances in _setGroupedTestPerformanceDTO.GroupedPerformances)
            {
                <div class="performance-card">

                    <div class="card-content">

                        <div class="overview-top">
                            <h2 class="">
                                @groupedPerformances.TestName
                            </h2>

                            <div class="card-actions overview-button-div">
                                <button class="learn-more-btn">Play again</button>
                            </div>
                        </div>

                        <div class="top-info text-center">

                            <h2 style="padding:5px;">
                                Total practice tests: @groupedPerformances.Performances.Count()
                            </h2>

                            <h3 class="text-center">
                                @groupedPerformances.TotalHits() of @groupedPerformances.TotalProbla() questions: @groupedPerformances.MediaScore().ToString("00.00")%
                            </h3>
                        </div>

                        <PerformanceBarComponent heightBar="15"
                                                 goodNumber="@groupedPerformances.TotalHits()"
                                                 badNumber="@groupedPerformances.TotalMiss()"
                                                 showFinalScore="false">

                        </PerformanceBarComponent>

                        @foreach (var testPerformance in groupedPerformances.Performances)
                        {
                            <div class="test-performance-card">

                                <div class="text-center">
                                    <h6>
                                        @testPerformance.CorrectAnswers of @testPerformance.TotalOptions(): @testPerformance.Score%
                                    </h6>
                                    <span>
                                        @testPerformance.Created.ToString("dd/MM HH:mm")
                                    </span>
                                </div>

                                @foreach (var report in testPerformance.ReportsByTag())
                                {

                                    <div class="performance-card">
                                        <PerformanceBarComponent goodNumber="@report.CorrectAmount"
                                                                 badNumber="@report.IncorrectAmount"
                                                                 showText="true"
                                                                 title="@report.Tag"
                                                                 showTitle="true"
                                                                 showBadNumber="true"
                                                                 showGoodNumber="true"
                                                                 showFinalScore="true"
                                                                 heightBar="10"></PerformanceBarComponent>
                                    </div>
                                }
                            </div>
                        }
                    </div>

                </div>
            }
        </div>
    </div>
}

@code {
    private IEnumerable<TestPerformance> _testPerformances = [];
    private SetGroupedPerformancesDTO _setGroupedTestPerformanceDTO = new();

    private string _userId = "";

    protected override async Task OnInitializedAsync()
    {
        _userId = await GetUserInfos.GetUserId();
        _testPerformances = await GetTestPerformancesByUserIdService.ExecuteAsync(Guid.Parse(_userId));
        _setGroupedTestPerformanceDTO.GroupAndFill(_testPerformances);
    }
}