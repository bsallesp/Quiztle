@page "/TestPerformances"
@rendermode InteractiveAuto

@using Microsoft.AspNetCore.Authorization
@using Quiztle.CoreBusiness.DTOs
@using Quiztle.CoreBusiness.Entities.Performance
@using Quiztle.Frontend.Client.APIServices.Performance
@using Quiztle.Frontend.Client.Utils

@inject GetUserInfos GetUserInfos
@inject GetTestPerformancesByUserIdService GetTestPerformancesByUserIdService
@attribute [Authorize]

@if (_testPerformances != null)
{
    <div class="full-screen-container">
        <h1 class="greeting">
            Hi, @GetUserInfos.GetUserNameOrEmail().Result! You had @_setGroupedTestPerformanceDTO.GetTotalPerformances() Tests!
        </h1>
        <div class="test-performances-container">
            @foreach (var groupedPerformances in _setGroupedTestPerformanceDTO.GroupedPerformances)
            {
                <div class="performance-card">

                    <div class="card-content">
                        <h3 class="test-name">
                            @groupedPerformances.TestName
                        </h3>
                        <h4 class="test-count">
                            Total Tests made: @groupedPerformances.Performances.Count()
                        </h4>
                        <h3 class="average-performance">
                            Average Performance: @groupedPerformances.MediaScore();
                        </h3>

                        <div class="tag-performance-card">

                            @foreach (var performance in groupedPerformances.Performances)
                            {
                                <span>
                                    @performance.Created.ToString("dd/MM HH:mm") - @performance.TestName - @performance.Score%
                                </span>
                                @foreach (var report in performance.ReportsByTag())
                                {

                                    <div class="performance-card">
                                        <PerformanceBarComponent
                                            goodNumber="@report.CorrectAmount"
                                            badNumber="@report.IncorrectAmount"
                                            showText="true"
                                            title="@report.Tag"
                                            showTitle="true"
                                            showBadNumber="true"
                                            showGoodNumber="true"
                                            showFinalScore="true"
                                            heightBar="10"
                                        ></PerformanceBarComponent>
                                    </div>
                                        
                                    <span>
                                        @report.CorrectAmount of @report.GetTotalAttempts()
                                    </span>
                                    <hr />
                                }
                                <hr />
                            }
                        </div>

                    </div>

                    <div class="card-actions">
                        <button class="learn-more-btn">Learn More</button>
                    </div>
                </div>
            }
        </div>
    </div>
}

@code {
    private IEnumerable<TestPerformance> _testPerformances = [];
    private SetGroupedPerformancesDTO _setGroupedTestPerformanceDTO = new();

    private string _userId = "";

    protected override async Task OnInitializedAsync()
    {
        _userId = await GetUserInfos.GetUserId();
        _testPerformances = await GetTestPerformancesByUserIdService.ExecuteAsync(Guid.Parse(_userId));
        _setGroupedTestPerformanceDTO.GroupAndFill(_testPerformances);
    }
}