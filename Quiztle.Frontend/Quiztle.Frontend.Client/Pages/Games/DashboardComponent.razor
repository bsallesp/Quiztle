@using Quiztle.CoreBusiness.Entities.Paid

<MudContainer
    Style="background-color: rgba(0, 0, 0, 0.05);
 border-radius: 15px;">
    <MudButton
        Style="width: 100%;
    border-radius: 15px;"

        OnClick="OnExpandCollapseClick">
        @if (_expanded)
        {
            <h5 style="margin: 0">
                Settings
            </h5>
            <MudIcon Icon="@Icons.Material.Filled.ArrowDropUp" Size="Size.Large"></MudIcon>
        }
        else
        {
            <h5 style="margin: 0">
                Settings
            </h5>
            <MudIcon Icon="@Icons.Material.Filled.ArrowDropDown" Size="Size.Large"></MudIcon>
        }

    </MudButton>
    <MudDivider/>
    <MudCollapse Expanded="_expanded">
        @foreach (var tag in TagsAmountDictionary.Keys)
        {
            <MudContainer
                Style="background-color: rgba(0, 0, 0, 0.075);
                margin-top: 10px;
                text-align: center;
                border-radius: 15px;">
                <MudSlider
                    Disabled="!HasPaid"
                    @bind-Value="TagValues[tag]"
                    Min="0"
                    Max="@TagsAmountDictionary[tag]"
                    Color="Color.Info">

                    <MudButton
                        Variant="Variant.Text"
                        Color="Color.Transparent"
                        @onclick="HasPaid ? () => SetExclusiveTagValue(tag) : null"
                        FullWidth="true">
                        @tag
                    </MudButton>
                    <MudDivider/>
                    <span>
                        @TagValues[tag].ToString() of @TagsAmountDictionary[tag]
                    </span>
                    <MudDivider/>

                </MudSlider>
            </MudContainer>
        }
    </MudCollapse>
</MudContainer>

<MudContainer
    Style="background-color: rgba(0, 0, 0, 0.05);
    border-radius: 15px;">

    @if (HasPaid)
    {
        <div class="d-flex justify-content-center align-items-center m-3">
            <button
                class="btn btn-outline-secondary btn-lg m-3"
                @onclick="ResetValues">
                Reset
            </button>
            <button class="btn btn-primary btn-lg m-3" @onclick="LoadPracticeTestClick">
                Generate Practice Test with total of @TotalSelected questions
            </button>
        </div>
    }

</MudContainer>

@code {
    [Parameter] public Action? LoadPracticeTest { get; set; }
    [Parameter] public Dictionary<string, int> TagsAmountDictionary { get; set; } = new Dictionary<string, int>();
    [Parameter] public bool HasPaid { get; set; } = false;
    [Parameter] public Dictionary<string, double> TagValues { get; set; } = [];

    bool _expanded = true;
    private double TotalSelected => TagValues.Values.Sum();

    private void OnExpandCollapseClick()
    {
        _expanded = !_expanded;
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        InitializeDefaultValues();
    }

    private void InitializeDefaultValues()
    {
        foreach (var tag in TagsAmountDictionary.Keys)
        {
            TagValues[tag] = Math.Min(HasPaid ? 10 : 2, TagsAmountDictionary[tag]);
        }
    }

    private void SetExclusiveTagValue(string selectedTag)
    {
        foreach (var tag in TagsAmountDictionary.Keys)
        {
            TagValues[tag] = tag == selectedTag ? TagsAmountDictionary[tag] : 0;
        }

        StateHasChanged();
    }

    private void ResetValues()
    {
        InitializeDefaultValues();
        StateHasChanged();
    }

    private void LoadPracticeTestClick()
    {
        LoadPracticeTest?.Invoke();
    }

}