@using Quiztle.CoreBusiness.Entities.Paid
<MudContainer Style="background-color: rgba(0, 0, 0, 0.05); border-radius: 15px;">
    @foreach (var tag in TagsAmountDictionary.Keys)
    {
        <MudSlider
            Disabled="!HasPaid"
            @bind-Value="TagValues[tag]"
            Min="0"
            Max="@TagsAmountDictionary[tag]"
            Color="Color.Info">

            <MudChip
                Size="Size.Small" T="string"
                Color="Color.Tertiary"
                @onclick="HasPaid ? () => SetExclusiveTagValue(tag) : null">
                @tag
            </MudChip>

            @TagValues[tag].ToString() of @TagsAmountDictionary[tag]
        </MudSlider>
    }

    @if (HasPaid)
    {
        <div class="d-flex justify-content-center align-items-center m-3"
             style="height: 100%;">
            <button
                class="btn btn-outline-secondary btn-lg m-3"
                @onclick="ResetValues">
                Reset
            </button>
            <button class="btn btn-primary btn-lg m-3" @onclick="LoadPracticeTestClick">
                Generate Practice Test with total of @TotalSelected questions
            </button>
        </div>
    }

</MudContainer>

@code {
    [Parameter]
    public Action? LoadPracticeTest { get; set; }
    
    [Parameter] public Dictionary<string, int> TagsAmountDictionary { get; set; } = new Dictionary<string, int>();
    [Parameter] public bool HasPaid { get; set; } = false;
    [Parameter] public Dictionary<string, double> TagValues { get; set; } = [];

    private double TotalSelected => TagValues.Values.Sum();

    protected override void OnInitialized()
    {
        base.OnInitialized();
        InitializeDefaultValues();
    }

    private void InitializeDefaultValues()
    {
        foreach (var tag in TagsAmountDictionary.Keys)
        {
            TagValues[tag] = Math.Min(HasPaid ? 10 : 2, TagsAmountDictionary[tag]);
        }
    }

    private void SetExclusiveTagValue(string selectedTag)
    {
        foreach (var tag in TagsAmountDictionary.Keys)
        {
            TagValues[tag] = tag == selectedTag ? TagsAmountDictionary[tag] : 0;
        }

        StateHasChanged();
    }

    private void ResetValues()
    {
        InitializeDefaultValues();
        StateHasChanged();
    }

    private void LoadPracticeTestClick()
    {
        
        LoadPracticeTest?.Invoke();
    }
}