@if (_isVisible)
{
    <div class="full-screen-div">
        <div class="container bg-fx">
            <div class="close-btn">
                <button @onclick="CloseBtn">
                    close
                    <img src="svg/utils/close-bold.svg" style="width: 40px; height: 40px;"/>
                </button>
            </div>
            <img src="svg/test-rating/@Image"/>

            <div class="card-title text-center">
                @Title
            </div>
            <div class="card-title text-center">
                Score:
            </div>
            <div class="questions-container">
                <div class="questions-amount">
                    @Score
                </div>
                <div class="questions-literal">
                    of @TotalQuestions
                </div>
            </div>

            <div class="message text-center">
                <h3 style="color: ghostwhite">@_message</h3>
            </div>

            @if (HasPaid)
            {
                <MudButton
                    Style="margin-top: 10px"
                    Variant="Variant.Filled"
                    Color="Color.Primary"
                    FullWidth="true"
                    OnClick="GoStats">
                    View Stats
                </MudButton>
            }
            else
            {
                <MudButton
                    Style="margin-top: 10px"
                    Variant="Variant.Filled"
                    Color="Color.Secondary"
                    FullWidth="true"
                    OnClick="GoBuy">
                    Get Premium, access all questions and check statistics
                </MudButton>
            }
        </div>
    </div>
}

@code {
    [Parameter] public required string Title { get; set; }
    [Parameter] public required int Score { get; set; }
    [Parameter] public required int QuestionsAmount { get; set; }
    [Parameter] public required int TotalQuestions { get; set; }
    [Parameter] public required bool HasPaid { get; set; }
    [Parameter] public required string TestId { get; set; }
    private string? _message = "";
    private bool _isVisible = true;
    public required string Image { get; set; } = "";

    protected override Task OnParametersSetAsync()
    {
        if (_isVisible) SetImageBasedOnScore();

        return base.OnParametersSetAsync();
    }

    private void SetImageBasedOnScore()
    {
        var percentage = (double)Score / TotalQuestions * 100;

        if (percentage < 50)
        {
            Image = "less-50-shield.svg";
            _message = GetRandomFeedback(new string[]
            {
                "Don't lose hope! Keep practicing, and you'll get there!",
                "Every effort counts! Keep pushing forward!",
                "Learning is a journey. You're making progress!",
                "Mistakes are part of the process. Try again!",
                "Stay determined! Success is just around the corner!"
            });
        }
        else if (percentage >= 50 && percentage < 80)
        {
            Image = "50-shield.svg";
            _message = GetRandomFeedback(new string[]
            {
                "Nice job! You're improving, keep it up!",
                "You're on the right path! A bit more practice will take you further!",
                "Solid effort! You're getting closer to your goal!",
                "Good work! Every attempt makes you stronger!",
                "You're doing well! Keep honing your skills!"
            });
        }
        else
        {
            Image = "80-shield.svg";
            _message = GetRandomFeedback(new string[]
            {
                "Fantastic! You're a star performer!",
                "Awesome job! You've mastered this topic!",
                "Impressive work! You should be proud of yourself!",
                "Exceptional! Your hard work truly shows!",
                "Outstanding achievement! Keep aiming high!"
            });
        }
    }

    private string GetRandomFeedback(string[] feedbacks)
    {
        Random random = new Random();
        int index = random.Next(feedbacks.Length);
        return feedbacks[index];
    }

    private void CloseBtn()
    {
        _isVisible = false;
    }

    private void GoStats() => Nav.NavigateTo("/testPerformances");

    private void GoBuy() => Nav.NavigateTo($"/Buy/TestId/{TestId}");
}