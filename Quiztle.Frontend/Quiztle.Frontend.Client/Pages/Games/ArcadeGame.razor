@page "/Games/Arcade/{TestId}"

@using Microsoft.AspNetCore.Authorization
@using Quiztle.Blazor.Client.APIServices.Tests
@using Quiztle.CoreBusiness.Entities.Paid
@using Quiztle.CoreBusiness.Entities.Performance
@using Quiztle.CoreBusiness.Entities.Quiz.DTO
@using Quiztle.CoreBusiness.Utils
@using Quiztle.Frontend.Client.APIServices
@using Quiztle.Frontend.Client.APIServices.Performance
@using Quiztle.Frontend.Client.Utils;

@inject GetQuestionsService GetQuestionsService
@inject GetDraftByIdService GetTestByIdService
@inject AddTestPerformanceService AddTestPerformanceService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject GetUserInfos GetUserInfos
@inject PaidService PaidService

@rendermode @(new InteractiveAutoRenderMode(false))
@attribute [Authorize]

<title>
    @if (_title != null)
        @("certcool - " + _title)
</title>

@if (_showLoadingScreen)
{
    <div style="display: flex; justify-content: center; align-items: center; height: 100vh; text-align: center;">
        @if (_testDto!.QuestionsDTO!.Count < 1)
        {
            <h4>
                <img src="gif/Rocket.gif" style="width: 100px; height: 100px;"/>
                <br/>
                LOADING...
            </h4>
        }
    </div>
}

@if (_showPracticeTestHeader)
{
    <div class="d-flex justify-content-center align-items-center text-center">
        <div class="me-3 p-3">

            @if (_testDto.ShieldSVG == null)
            {
                <img src="img/courses/default.svg" style="width: 100px; height: 100px;"/>
            }
            else
            {
                <img src="img/courses/@_testDto.ShieldSVG" style="width: 100px; height: 100px;"/>
            }

        </div>
        <div style="padding: 10px 10px;">
            <h1>
                @_testDto.Name
            </h1>
            <h3>
                @(_testDto.QuestionsDTO.Count + " questions")
            </h3>
        </div>
    </div>

    <MudContainer MaxWidth="MaxWidth.Medium">
        <DashboardComponent
            IsPaid="_hasPaid"
            TagsAmountDictionary="_dashboardSetup">
        </DashboardComponent>
    </MudContainer>
}

@if (_showPracticeTestQuestions)
{
    <MudContainer MaxWidth="MaxWidth.Medium">
        <div class="main-div">
            <div style="padding-bottom:80px;">
                @if (_testDto.QuestionsDTO != null)
                {
                    @foreach (var questionDTO in _testDto.QuestionsDTO)
                    {
                        var index = _testDto.QuestionsDTO.IndexOf(questionDTO);
                        <QuestionDTOArcadeComponent
                            ShowResults="ShowResults"
                            questionDTO="questionDTO"
                            Number="@index"
                            IsFinished="questionDTO.IsFinished"
                            OnGetAnswer="@(() => HandleGetAnswer(questionDTO))"
                            OnSelectAnswer="@(() => HandleSelectAnswer())">
                        </QuestionDTOArcadeComponent>
                    }
                }
            </div>
            <div class="fixed-bottom-container">

                <ProgressBar @ref=progressBar
                             TotalQuestions="@_testDto!.QuestionsDTO!.Count"
                             AnsweredQuestions="@_testDto.GetTotalSelectedOrFinishedQuestions()"/>

                @if (!ShowResults)
                {
                    bool disabledFinishButton = (_testDto.GetTotalSelectedOrFinishedQuestions() != _testDto.QuestionsDTO.Count);

                    <button disabled="@(disabledFinishButton ? "disabled" : null)"
                            class="btn btn-primary w-100 d-flex align-items-center justify-content-center" @onclick="FinalizeTestResponse">
                        <h3 class="mb-0">
                            FINISH (@_testDto.GetTotalSelectedOrFinishedQuestions() of @_testDto.QuestionsDTO.Count)
                        </h3>
                    </button>
                }

                @if (ShowResults)
                {
                    <div style="background-color: mintcream;">
                        <button class="btn btn-primary w-100 d-flex align-items-center justify-content-center" @onclick="() => PlayAgain()">
                            <h3 class="mb-0">
                                Next Game
                            </h3>
                        </button>
                    </div>
                }
            </div>
        </div>
    </MudContainer>
}

@if (_showFinalScreen)
{
    <FinalScreenComponent Title="Azure AZ-900 Fundamentals"
                          Score="@_testDto.GetTotalCorrectAnswers()"
                          QuestionsAmount="200"
                          TotalQuestions="@_testDto.QuestionsDTO.Count()">
    </FinalScreenComponent>
}

@code {
    ProgressBar progressBar = new();

    private string _title = "Quiztle";

    [Parameter] public string TestId { get; set; } = "";

    private readonly TestDTO _testDto = new();
    private Guid _testGuid = new Guid();
    private bool _showFinalScreen = false;
    private bool _showLoadingScreen = true;
    private bool _showPracticeTestHeader = false;
    private bool _showPracticeTestQuestions = false;
    private Dictionary<string, int> _dashboardSetup = [];
    private bool _showResults = false;
    private bool _hasPaid = false;

    public bool ShowResults
    {
        get => _showResults;
        set
        {
            if (_showResults != value)
            {
                _showResults = value;
            }
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        _hasPaid = await PaidService.IsPaidService(new Paid()
        {
            UserEmail = await GetUserInfos.GetUserEmail(),
            TestId = TestId
        });

        if (_hasPaid) await LoadPremiumTestAsync();
        else await LoadFreeTestAsync(TestId);
    }

    private async Task LoadFreeTestAsync(string TestId)
    {
        Console.WriteLine("Its NOT Paid!");
        var data = await GetTestByIdService.ExecuteAsync(Guid.Parse(TestId));
        var freeTest = data.Data.GetFreeTest(2);
        _testDto.FromTest(freeTest);
        _dashboardSetup = _testDto.GetQuestionCountByTag();
        LoadPracticeTestScreen();
    }


    private async Task LoadPremiumTestAsync()
    {
        try
        {
            Console.WriteLine("Its Paid!");
            var data = await GetTestByIdService.ExecuteAsync(Guid.Parse(TestId));
            _testDto.FromTest(data.Data);
            _dashboardSetup = _testDto.GetQuestionCountByTag();
            Console.WriteLine($"Total questions: {_testDto.QuestionsDTO.Count}");
            LoadDashboard();
            // LoadPracticeTestScreen();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    private void LoadDashboard()
    {
        _showLoadingScreen = false;
        _showPracticeTestHeader = true;
    }

    private void HandleGetAnswer(QuestionDTO questionDto)
    {
        questionDto.IsFinished = true;
        progressBar.AnsweredQuestions = _testDto.GetTotalSelectedOrFinishedQuestions();
        StateHasChanged();
    }

    private void HandleSelectAnswer()
    {
        progressBar.AnsweredQuestions = _testDto.GetTotalSelectedOrFinishedQuestions();
        StateHasChanged();
    }

    private void PlayAgain()
    {
        try
        {
            Nav.NavigateTo($"/Games/Arcade/{_testGuid}");
        }
        catch
        {
            Nav.NavigateTo($"/Games/Arcade/");
        }
    }

    private async Task FinalizeTestResponse()
    {
        await AddTestPerformance();
        ShowResults = true;
        _showFinalScreen = true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        await LoadPremiumTestAsync();
        StateHasChanged();
    }

    private void LoadPracticeTestScreen()
    {
        _showLoadingScreen = false;
        _showPracticeTestQuestions = true;
        StateHasChanged();
    }

    private async Task AddTestPerformance()
    {
        var userId = await GetUserInfos.GetUserId();

        var testPerformance = _testDto.CreateTestPerformance(userId);

        await AddTestPerformanceService.ExecuteAsync(testPerformance);
    }

}