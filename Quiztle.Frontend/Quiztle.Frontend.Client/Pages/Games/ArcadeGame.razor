@page "/Games/Arcade/{TestId}"

@using Microsoft.AspNetCore.Authorization
@using Quiztle.Blazor.Client.APIServices.Tests
@using Quiztle.CoreBusiness.Entities.Paid
@using Quiztle.CoreBusiness.Entities.Performance
@using Quiztle.CoreBusiness.Entities.Quiz.DTO
@using Quiztle.CoreBusiness.Utils
@using Quiztle.Frontend.Client.APIServices
@using Quiztle.Frontend.Client.APIServices.Performance
@using Quiztle.Frontend.Client.Utils;

@rendermode @(new InteractiveServerRenderMode(prerender: false))

@inject GetQuestionsService GetQuestionsService
@inject GetTestByIdService GetTestByIdService
@inject AddTestPerformanceService AddTestPerformanceService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject GetUserInfos GetUserInfos

@attribute [Authorize]

<title>
    @if (_title != null)
    {
        @("certcool - " + _title);
    }
</title>

@if (_showFinalScreen)
{
    <FinalScreenComponent Title="Azure AZ-900 Fundamentals"
                          Score="@_testDTO.GetTotalCorrectAnswers()"
                          QuestionsAmount="200"
                          TotalQuestions="@_testDTO.QuestionsDTO.Count()">
    </FinalScreenComponent>
}

@if (_showPracticeTest)
{
    <MudContainer MaxWidth="MaxWidth.Medium">
        <div class="main-div">
            <div style="padding-bottom:80px;">
                @if (_testDTO.QuestionsDTO != null)
                {
                    <div class="d-flex justify-content-center align-items-center text-center">
                        <div class="me-3 p-3">
                            @if (_testDTO.ShieldSVG == null)
                            {
                                <img src="img/courses/default.svg" style="width: 100px; height: 100px;" />
                            }
                            else
                            {
                                <img src="img/courses/@_testDTO.ShieldSVG" style="width: 100px; height: 100px;" />
                            }
                        </div>
                        <div style="padding: 10px 10px;">
                            <h1>
                                @_testDTO.Name
                            </h1>
                            <h3>
                                @(_testDTO.QuestionsDTO.Count + " questions")
                            </h3>
                        </div>
                    </div>

                    @foreach (var questionDTO in _testDTO.QuestionsDTO)
                    {
                        var index = _testDTO.QuestionsDTO.IndexOf(questionDTO);
                        <QuestionDTOArcadeComponent ShowResults="ShowResults"
                                                    questionDTO="questionDTO"
                                                    Number="@index"
                                                    IsFinished="questionDTO.IsFinished"
                                                    OnGetAnswer="@(() => HandleGetAnswer(questionDTO))"
                                                    OnSelectAnswer="@(() => HandleSelectAnswer())">
                        </QuestionDTOArcadeComponent>
                    }
                }
            </div>
            <div class="fixed-bottom-container">
                <ProgressBar @ref=progressBar
                             TotalQuestions="@_testDTO!.QuestionsDTO!.Count"
                             AnsweredQuestions="@_testDTO.GetTotalSelectedOrFinishedQuestions()" />

                @if (!ShowResults)
                {
                    bool disabledFinishButton = (_testDTO.GetTotalSelectedOrFinishedQuestions() != _testDTO.QuestionsDTO.Count);
                    <button disabled="@(disabledFinishButton ? "disabled" : null)"
                            class="btn btn-primary w-100 d-flex align-items-center justify-content-center" @onclick="FinalizeTestResponse">
                        <h3 class="mb-0">
                            FINISH (@_testDTO.GetTotalSelectedOrFinishedQuestions() of @_testDTO.QuestionsDTO.Count)
                        </h3>
                    </button>
                }

                @if (ShowResults)
                {
                    <div style="background-color: mintcream;">
                        <button class="btn btn-primary w-100 d-flex align-items-center justify-content-center" @onclick="() => PlayAgain()">
                            <h3 class="mb-0">
                                Next Game
                            </h3>
                        </button>
                    </div>
                }
            </div>
        </div>
    </MudContainer>
}

@if (_showLoadingScreen)
{
    <div style="display: flex; justify-content: center; align-items: center; height: 100vh; text-align: center;">
        @if (_testDTO!.QuestionsDTO!.Count < 1)
        {
            <h4>
                <img src="gif/Rocket.gif" style="width: 100px; height: 100px;" alt=""/>
                <br />
                LOADING...
            </h4>
        }
    </div>
}

@code {
    ProgressBar progressBar = new();

    private string _title = "certcool";

    [Parameter]
    public string TestId { get; set; } = "";
    
    public bool ShowResults
    {
        get => _showResults;
        set
        {
            if (_showResults != value)
            {
                _showResults = value;
            }
        }
    }

    private TestDTO _testDTO = new();
    private Guid _testGuid = new Guid();
    private bool _showFinalScreen = false;
    private bool _showLoadingScreen = true;
    private bool _showPracticeTest = false;
    private bool _showResults = false;
    private bool _isPaymentChecked = false;
    private bool _isPaid = false;

    private void HandleGetAnswer(QuestionDTO questionDto)
    {
        questionDto.IsFinished = true;
        progressBar.AnsweredQuestions = _testDTO.GetTotalSelectedOrFinishedQuestions();
    }

    private void HandleSelectAnswer()
    {
        progressBar.AnsweredQuestions = _testDTO.GetTotalSelectedOrFinishedQuestions();
    }

    private void PlayAgain()
    {
        try
        {
            Logger.LogInformation("Reiniciando o jogo com TestGuid: {_testGuid}", _testGuid);
            Nav.NavigateTo($"/Games/Arcade/{_testGuid}");
        }
        catch
        {
            Logger.LogWarning("Erro ao reiniciar o jogo, redirecionando para Games/Arcade.");
            Nav.NavigateTo($"/Games/Arcade/");
        }
    }

    private async Task FinalizeTestResponse()
    {
        await AddTestPerformance();
        ShowResults = true;
        _showFinalScreen = true;
        Logger.LogInformation("Finalizando a resposta do teste.");
    }

    protected override async Task OnParametersSetAsync()
    {
        _isPaid = await IsPaid();
        
        if (!_isPaid && _isPaymentChecked) RedirectToBuy();
        if (_isPaid || _isPaymentChecked) await LoadTestAsync();
    }

    private async Task<bool> IsPaid()
    {
        var email = await GetUserInfos.GetUserEmail();
        Logger.LogInformation("Email obtido: {Email}", email);

        if (string.IsNullOrEmpty(email))
        {
            Logger.LogWarning("Email não encontrado, redirecionando para erro.");
            Nav.NavigateTo("/Error", true);
            return false;
        }
        
        Logger.LogInformation($"Getting TestId: {TestId}");

        var purchases = await PaidService.GetPaidByEmailService(email);
        if (purchases == null)
        {
            Logger.LogInformation("THERE ARE NO PURCHASES");
            return false;
        }
        
        var purchase = (purchases.FirstOrDefault(t =>
                t.TestId == TestId));
        
        if (purchase == null)
        {
            Logger.LogInformation("THERE ARE NO PURCHASE");
            RedirectToBuy();
            return false;
        }
        
        Logger.LogInformation("PriceID: " + purchase.PriceId);
        Logger.LogInformation("TestID: " + purchase.TestId);

        Logger.LogInformation("Pagamento encontrado?: {Found}", purchase != null);
        _isPaymentChecked = true;
        return purchase != null;
    }

    private void RedirectToBuy()
    {
        Logger.LogInformation("Redirecionando para compra do TestId: {TestId}", TestId);
        if(_isPaymentChecked) Logger.LogInformation("NAVIGATINGGGGGGGGGGGGGGNNNNNNNNNN");
        Nav.NavigateTo("/Buy/TestId/" + TestId);
    }

    private async Task LoadTestAsync()
    {
        try
        {
            if (!_isPaymentChecked || !_isPaid) return;
            Logger.LogInformation("Iniciando o carregamento do teste.");
            _testGuid = Guid.Parse(TestId);
            var testApiResponse = await GetTestByIdService.ExecuteAsync(_testGuid);
            if (testApiResponse.Status != CustomStatusCodes.SuccessStatus)
                throw new Exception("TestGame: Error during retrieving TestApiResponse");
            _testDTO.FromTest(testApiResponse.Data);
            _title = testApiResponse.Data.Name;
            Logger.LogInformation("Teste carregado com sucesso: {TestName}", _title);
            
            LoadPracticeTestScreen();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Erro ao carregar o teste.");
        }
    }

    private void LoadPracticeTestScreen()
    {
        if (!_isPaymentChecked || !_isPaid) return;
        _showPracticeTest = true;
        Logger.LogInformation("Tela de prática do teste carregada.");
        StateHasChanged();
    }

    private async Task AddTestPerformance()
    {
        var userId = await GetUserInfos.GetUserId();
        Logger.LogInformation("Adicionando performance do teste para o UserId: {UserId}", userId);

        var testPerformance = _testDTO.CreateTestPerformance(userId);
        await AddTestPerformanceService.ExecuteAsync(testPerformance);
    }
}