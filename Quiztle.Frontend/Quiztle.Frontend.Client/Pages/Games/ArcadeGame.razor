@page "/Games/Arcade/{TestId}"

@using Microsoft.AspNetCore.Authorization
@using Quiztle.Blazor.Client.APIServices.Tests
@using Quiztle.CoreBusiness.Entities.Paid
@using Quiztle.CoreBusiness.Entities.Performance
@using Quiztle.CoreBusiness.Entities.Quiz.DTO
@using Quiztle.CoreBusiness.Utils
@using Quiztle.Frontend.Client.APIServices
@using Quiztle.Frontend.Client.APIServices.Performance
@using Quiztle.Frontend.Client.Utils;

@inject GetQuestionsService GetQuestionsService
@inject GetTestByIdService GetTestByIdService
@inject AddTestPerformanceService AddTestPerformanceService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject GetUserInfos GetUserInfos
@inject PaidService PaidService

@rendermode @(new InteractiveAutoRenderMode(false))
@attribute [Authorize]

<title>
    certcool - @_testDto.Name
</title>

@if (_showLoadingScreen)
{
    <div style="display: flex; justify-content: center; align-items: center; height: 100vh; text-align: center;">
        @if (_testDto!.QuestionsDTO!.Count < 1)
        {
            <h4>
                <img src="gif/Rocket.gif" style="width: 100px; height: 100px;"/>
                <br/>
                LOADING...
            </h4>
        }
    </div>
}

@if (_showPracticeTestHeader)
{
    if (!_hasPaid)
    {
        <InfoComponent TestId="@TestId">

        </InfoComponent>
    }

    <div class="justify-content-center align-items-center text-center">
        <div class="me-3 p-3">
            <img src="img/courses/@_shield" style="width: 150px; height: 150px;"/>
        </div>
        <div style="padding: 10px 10px;">
            <h1>
                @_testDto.Name
            </h1>
            <h3>
                @(_testDto.QuestionsDTO.Count + " questions")
            </h3>
        </div>
    </div>

    <MudContainer MaxWidth="MaxWidth.Medium">
        <DashboardComponent
            @ref="_dashboardComponent"
            HasPaid="_hasPaid"
            TagsAmountDictionary="_dashboardSetup">
        </DashboardComponent>
    </MudContainer>
}

@if (_showPracticeTestQuestions)
{
    <MudContainer MaxWidth="MaxWidth.Medium">
        <div class="main-div">
            <div style="padding-bottom:80px;">
                @if (_testDto.QuestionsDTO != null)
                {
                    @foreach (var questionDTO in _testDto.QuestionsDTO)
                    {
                        var index = _testDto.QuestionsDTO.IndexOf(questionDTO);
                        <QuestionDTOArcadeComponent
                            ShowResults="ShowResults"
                            questionDTO="questionDTO"
                            Number="@index"
                            IsFinished="questionDTO.IsFinished"
                            OnGetAnswer="@(() => HandleGetAnswer(questionDTO))"
                            OnSelectAnswer="@(() => HandleSelectAnswer())">
                        </QuestionDTOArcadeComponent>
                    }
                }
            </div>
            <div class="fixed-bottom-container text-center">

                <ProgressBar
                    @ref=progressBar
                    TotalQuestions="@_testDto!.QuestionsDTO!.Count"
                    AnsweredQuestions="@_testDto.GetTotalSelectedOrFinishedQuestions()"/>

                @if (!ShowResults)
                {
                    bool disabledFinishButton = (_testDto.GetTotalSelectedOrFinishedQuestions() != _testDto.QuestionsDTO.Count);

                    <button
                        style="border-radius: 5px;
                        margin-top: 7px; width: 90%;
                        color: antiquewhite;"
                        disabled="@(disabledFinishButton ? "disabled" : null)"
                        class="btn btn-primary"
                        @onclick="FinalizeTestResponse">
                        @if (@_testDto.GetTotalSelectedOrFinishedQuestions() != @_testDto.QuestionsDTO.Count)
                        {
                            <h3
                                class="mb-0">
                                Keep Going! (@_testDto.GetTotalSelectedOrFinishedQuestions() of @_testDto.QuestionsDTO.Count)
                            </h3>
                        }

                        @if (@_testDto.GetTotalSelectedOrFinishedQuestions() == @_testDto.QuestionsDTO.Count)
                        {
                            <h3
                                class="mb-0" style="color: whitesmoke">
                                Finalize! (@_testDto.GetTotalSelectedOrFinishedQuestions() of @_testDto.QuestionsDTO.Count)
                            </h3>
                        }
                    </button>
                }

                @if (ShowResults)
                {
                    <div style="background-color: mintcream;">
                        <button
                            style="border-radius: 5px;
                            margin-top: 7px;"
                            class="btn btn-primary"
                            @onclick="PlayAgain">
                            <h3 class="mb-0">
                                Play again <MudIcon Icon="@Icons.Material.Filled.Replay" Size="Size.Medium"/>
                            </h3>
                        </button>
                    </div>
                }
            </div>
        </div>
    </MudContainer>
}

@if (_showFinalScreen)
{
    <FinalScreenComponent Title="Azure AZ-900 Fundamentals"
                          Score="@_testDto.GetTotalCorrectAnswers()"
                          QuestionsAmount="200"
                          TotalQuestions="@_testDto.QuestionsDTO.Count()">
    </FinalScreenComponent>
}

@code {
    ProgressBar progressBar = new();

    private string _title = "Quiztle";

    [Parameter] public string TestId { get; set; } = "";

    private readonly TestDTO _testDto = new();
    private Guid _testGuid = new Guid();
    private bool _showFinalScreen = false;
    private bool _showLoadingScreen = true;
    private bool _showPracticeTestHeader = false;
    private bool _showPracticeTestQuestions = false;
    private Dictionary<string, int> _dashboardSetup = [];
    private bool _showResults = false;
    private bool _hasPaid = false;
    private string _shield = "default.svg";

    private DashboardComponent _dashboardComponent;

    public bool ShowResults
    {
        get => _showResults;
        set
        {
            if (_showResults != value)
            {
                _showResults = value;
            }
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        _hasPaid = await PaidService.IsPaidService(new Paid()
        {
            UserEmail = await GetUserInfos.GetUserEmail(),
            TestId = TestId
        });

        await LoadTestAsync();
    }

    private async Task LoadTestAsync()
    {
        try
        {
            var data = await GetTestByIdService.ExecuteAsync(Guid.Parse(TestId));
            Console.WriteLine(data.Data.Questions.Count);
            _shield = data.Data.ShieldSVG ?? "default.svg";
            _testDto.FromTest(data.Data);
            _dashboardSetup = data.Data.GetQuestionCountByTag();
            Console.WriteLine(_dashboardSetup.Count);
            if (!_hasPaid)
            {
                _testDto.FromTest(data.Data.GetFreeTest(2));
                LoadPracticeTestScreen();
            }

            LoadDashboardScreen();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    private void LoadDashboardScreen()
    {
        _showLoadingScreen = false;
        _showPracticeTestHeader = true;
    }

    private void HandleGetAnswer(QuestionDTO questionDto)
    {
        questionDto.IsFinished = true;
        progressBar.AnsweredQuestions = _testDto.GetTotalSelectedOrFinishedQuestions();
        StateHasChanged();
    }

    private void HandleSelectAnswer()
    {
        progressBar.AnsweredQuestions = _testDto.GetTotalSelectedOrFinishedQuestions();
        StateHasChanged();
    }

    private void PlayAgain() => Nav.NavigateTo($"/Games/Arcade/{TestId}", true);

    private async Task FinalizeTestResponse()
    {
        await AddTestPerformance();
        ShowResults = true;
        _showFinalScreen = true;
    }

    private void LoadPracticeTestScreen()
    {
        _showLoadingScreen = false;
        _showPracticeTestQuestions = true;
        StateHasChanged();
    }

    private async Task AddTestPerformance()
    {
        var userId = await GetUserInfos.GetUserId();

        var testPerformance = _testDto.CreateTestPerformance(userId);
        testPerformance.TestId = Guid.Parse(TestId);
        await AddTestPerformanceService.ExecuteAsync(testPerformance);
    }

}