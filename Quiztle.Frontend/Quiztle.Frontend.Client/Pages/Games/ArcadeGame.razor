@page "/Games/Arcade/{TestId}"
@page "/Games/Arcade/{TestId}/{admin:bool?}"
@page "/Games/Arcade/{TestId}/{amount}"
@page "/Games/Arcade/{TestId}/{amount}/{admin:bool?}"

@using Microsoft.AspNetCore.Authorization
@using Quiztle.Blazor.Client.APIServices.Tests
@using Quiztle.CoreBusiness.Entities.Quiz.DTO
@using Quiztle.CoreBusiness.Utils

@inject GetQuestionsService GetQuestionsService
@inject GetTestByIdService GetTestByIdService

@rendermode InteractiveAuto
@attribute [Authorize]

<title>
    @if (_title != null)
        @("Quiztle: " + _title)


</title>

<div class="gap"></div>

@if (_showFinalScreen)
{
    <FinalScreenComponent Title="Azure AZ-900 Fundamentals"
                          Score="@_testDTO.GetTotalCorrectAnswers()"
                          QuestionsAmount="200"
                          TotalQuestions="@_testDTO.QuestionsDTO.Count()">
    </FinalScreenComponent>
}

@if (_testDTO.QuestionsDTO.Count >= 1)
{
    <div class="main-div">
        <div style="padding-bottom:80px;">
            @if (_testDTO.QuestionsDTO != null)
            {
                <div class="text-center">
                    <h1>
                        @_testDTO.Name
                    </h1>
                    <h2>
                        @(_testDTO.QuestionsDTO.Count + " questions")
                    </h2>
                </div>

                @foreach (var questionDTO in _testDTO.QuestionsDTO)
                {
                    var index = _testDTO.QuestionsDTO.IndexOf(questionDTO);
                    <QuestionDTOArcadeComponent ShowResults="ShowResults"
                                                questionDTO="questionDTO"
                                                Number="@index"
                                                Admin="@Admin"
                                                IsFinished="questionDTO.IsFinished"
                                                OnGetAnswer="@(() => HandleGetAnswer(questionDTO))">
                    </QuestionDTOArcadeComponent>
                }
            }
        </div>
        <div class="fixed-bottom-container">

            <ProgressBar TotalQuestions="@_testDTO!.QuestionsDTO!.Count"
                         AnsweredQuestions="@_testDTO.GetTotalFinishedQuestions()" />

            @if (!ShowResults)
            {
                <button class="btn btn-primary w-100 d-flex align-items-center justify-content-center" @onclick="() => FinalizeTestResponse()">
                    <h3 class="mb-0">
                        FINISH
                    </h3>
                </button>
            }
            @if (ShowResults)
            {
                <div style="background-color: mintcream;">
                    @if (_testDTO.QuestionsDTO!.Count > 1)
                    {
                        <h4>
                            You got @_testDTO.GetTotalCorrectAnswers() out of @_testDTO.QuestionsDTO!.Count questions correct
                        </h4>
                    }
                    <button class="btn btn-primary w-100 d-flex align-items-center justify-content-center" @onclick="() => NextQuestion()">
                        <h3 class="mb-0">
                            Next Game
                        </h3>
                    </button>
                </div>
            }
        </div>
    </div>
}

@if (_testDTO!.QuestionsDTO!.Count < 1)
{
    <h4 class="text-center">
        LOADING...
    </h4>
}

@code {
    private string _title = "Quiztle";

    [Parameter]
    public string TestId { get; set; } = "";
    [Parameter]
    public string amount { get; set; } = "";
    [Parameter]
    public bool Admin { get; set; } = false;

    private TestDTO _testDTO = new();
    private Guid _testGuid = new Guid();
    private bool _showFinalScreen = false;

    private bool _showResults = false;
    public bool ShowResults
    {
        get => _showResults;
        set
        {
            if (_showResults != value)
            {
                _showResults = value;
            }
        }
    }

    private void HandleGetAnswer(QuestionDTO questionDTO)
    {
        questionDTO.IsFinished = true;
        StateHasChanged();
    }

    private void NextQuestion()
    {
        Nav.NavigateTo($"/Games/Arcade/{_testGuid}/{_testDTO.QuestionsDTO!.Count}/{Admin}", true);
    }

    private void FinalizeTestResponse()
    {
        ShowResults = true;
        _showFinalScreen = true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        await LoadTestAsync();
        StateHasChanged();
    }

    private async Task LoadTestAsync()
    {
        try
        {
            if (TestId == "00000")
            {
                var result = await GetQuestionsService.ExecuteAsync();
                if (result == null) return;

                var test = new Test();
                test.Name = "All Questions";
                test.Questions = result.Data.ToList();

                _testDTO.FromTest(test);
            }
            else if (!Guid.TryParse(TestId, out Guid testIdGuid))
            {
                Nav.NavigateTo("/", true);
            }
            else
            {
                _testGuid = Guid.Parse(TestId);
                var testAPIReponse = await GetTestByIdService.ExecuteAsync(testIdGuid);

                if (testAPIReponse.Status != CustomStatusCodes.SuccessStatus)
                    throw new Exception("TestGame: Error during retrieving TestApiResponse");

                _testDTO.FromTest(testAPIReponse.Data);
                _title = testAPIReponse.Data.Name;

                if (int.TryParse(this.amount, out int amount))
                {
                    _testDTO.SetQuestionsAmount(amount);
                }
            }
        }
        catch (Exception ex)
        {
            // Handle exception or log it
            Console.WriteLine($"Error: {ex.Message}");
        }
    }
}
