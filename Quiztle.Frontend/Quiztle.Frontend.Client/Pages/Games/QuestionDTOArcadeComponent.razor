@using Quiztle.Blazor.Client.APIServices.Responses
@using Quiztle.Blazor.Client.APIServices.Shots
@using Quiztle.CoreBusiness.Utils
@using Quiztle.CoreBusiness.Entities.Quiz
@using Quiztle.CoreBusiness.Entities.Quiz.DTO
@using Microsoft.AspNetCore.Components

@inject UpdateQuestionService UpdateQuestionService
@inject RemoveQuestionService RemoveQuestionService

@rendermode InteractiveAuto

<div class="main-div">
    @if (questionDTO != null)
    {
        <h4 style="padding: 10px;">
            @(1 + Number) - @questionDTO.Question!.Name
        </h4>

        @foreach (var option in questionDTO.OptionsDTO)
        {
            <h6 @onclick="() => SelectOption(option)" class="option @GetOptionStyle(option)">
                @letters[questionDTO.OptionsDTO.IndexOf(option)] @option.Name
            </h6>
        }
    }

    <div class="d-flex justify-content-between">
        <button disabled="@_disableHintButton" class="btn btn-primary w-50 d-flex align-items-center justify-content-center hint-button"
                @onclick="ShowHint">
            <h3 class="mb-0">
                Hint
            </h3>
        </button>

        <button disabled="@_disableGetAnswerButton" class="btn btn-primary w-50 d-flex align-items-center justify-content-center hint-button"
                @onclick="() => GetAnswer()">
            <h3 class="mb-0">
                Get Answer
            </h3>
        </button>
    </div>

    @if (_showHint)
    {
        <div class="hint-text text-center">
            <h6>
                @questionDTO!.Question!.Hint
            </h6>
        </div>
    }

    @if (_showResolution)
    {
        <div class="hint-text text-center">
            <h6>
                @questionDTO!.Question!.Resolution
            </h6>
        </div>
    }

    @if (Admin)
    {
        <input class="btn btn-primary w-100 d-flex align-items-center justify-content-center" style="font-size: 30px" type="number" @bind="_rate" />
        <button class="btn btn-primary w-100 d-flex align-items-center justify-content-center"
                @onclick="() => RateIt()"
                style="background-color: lightgreen">
            <h3 class="mb-0">
                Rate
            </h3>
        </button>
        <button class="btn btn-primary w-100 d-flex align-items-center justify-content-center"
                @onclick="() => DeleteQuestion()"
                style="background-color: red">
            <h3 class="mb-0">
                Delete
            </h3>
        </button>
    }
</div>

@code
{
    [Parameter]
    public QuestionDTO? questionDTO { get; set; }
    [Parameter]
    public int Number { get; set; }
    [Parameter]
    public Guid responseGuid { get; set; }
    [Parameter]
    public bool Admin { get; set; } = false;
    [Parameter]
    public required bool IsFinished { get; set; } = false;
    [Parameter]
    public Action? OnGetAnswer { get; set; }

    private bool _showHint;
    private bool _showResolution;
    private bool _disableHintButton = false;
    private bool _disableGetAnswerButton = false;

    private int _rate;

    private bool _showResults;
    private HashSet<Guid> _selectedOptionIds = new HashSet<Guid>();

    [Parameter]
    public bool ShowResults
    {
        get => _showResults;
        set
        {
            if (_showResults != value)
            {
                _showResults = value;
                if (_showResults)
                {
                    _disableGetAnswerButton = true;
                    _disableHintButton = true;
                    _showHint = false;
                    _showResolution = true;
                    PreserveSelections();
                }
            }
        }
    }

    private void ShowHint()
    {
        if (_showResults || _showHint) return;
        _showHint = !_showHint;
        _disableHintButton = true;
    }

    private void GetAnswer()
    {
        if (_showResults) return;
        ShowResults = true;
        _showResolution = true;
        _disableHintButton = true;
        _disableGetAnswerButton = true;
        IsFinished = true;

        OnGetAnswer?.Invoke();
    }

    private async void DeleteQuestion()
    {
        var id = questionDTO!.Question!.Id;
        questionDTO.Question.Rate = _rate;
        var update = await RemoveQuestionService.ExecuteAsync(id);
    }

    private async void RateIt()
    {
        var id = questionDTO!.Question!.Id;
        questionDTO.Question.Rate = _rate;
        var update = await UpdateQuestionService.ExecuteAsync(id, questionDTO.Question);
    }

    private string[] letters = { "A)", "B)", "C)", "D)", "E)", "F)" };

    protected override Task OnParametersSetAsync()
    {

        return base.OnParametersSetAsync();
    }

    protected override Task OnInitializedAsync()
    {
        // questionDTO!.ShuffleOptions();
        if (questionDTO != null) _rate = questionDTO.Question!.Rate;
        return base.OnInitializedAsync();
    }

    private void PreserveSelections()
    {
        _selectedOptionIds.Clear();
        foreach (var option in questionDTO!.OptionsDTO.Where(o => o.IsSelected))
        {
            _selectedOptionIds.Add(option.Id);
        }
    }

    private string GetOptionStyle(OptionDTO option)
    {
        if (ShowResults)
        {
            if (_selectedOptionIds.Contains(option.Id) && option.IsCorrect)
            {
                return "correct";
            }
            if (_selectedOptionIds.Contains(option.Id) && !option.IsCorrect)
            {
                return "incorrect";
            }
            if (!_selectedOptionIds.Contains(option.Id) && option.IsCorrect)
            {
                return "not-selected-correct";
            }
        }
        return _selectedOptionIds.Contains(option.Id) ? "selected" : "";
    }

    private void SelectOption(OptionDTO selectedOption)
    {
        if (ShowResults) return;
        UnselectAll();
        selectedOption.IsSelected = true;
        _selectedOptionIds.Add(selectedOption.Id);
    }

    private void UnselectAll()
    {
        foreach (var option in questionDTO!.OptionsDTO)
        {
            option.IsSelected = false;
        }
        _selectedOptionIds.Clear();
    }
}