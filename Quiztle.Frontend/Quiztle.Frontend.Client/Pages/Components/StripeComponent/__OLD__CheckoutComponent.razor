@* @page "/create-order" *@
@using MudBlazor
@using Stripe
@inject IJSRuntime jsRuntime
@rendermode InteractiveAuto

<script src="https://js.stripe.com/v3/"></script>

<div style="height:300px"></div>
<div id="card-element"></div>
<div id="card-errors" role="alert"></div>

<hr />
<MudButton @onclick="CreatePayMethod">BUY</MudButton>
<hr />
@priceId
<hr />
@cardHolderId
<hr />
@cardId

@code{
    private string priceId = "";
    private string cardHolderId = "";
    private string cardId = "";


    private async Task CreatePrice()
    {
        StripeConfiguration.ApiKey
        = "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";

        var options = new PriceCreateOptions
        {
            Currency = "usd",
            UnitAmount = 10,
            Recurring = new PriceRecurringOptions { Interval = "month" },
            ProductData = new PriceProductDataOptions { Name = "Low Core Learning Plan" },
        };

        var service = new PriceService();
        var price = await service.CreateAsync(options);

        priceId = price.Id;

        Console.WriteLine($"Price ID: {price.Id}");
        Console.WriteLine($"Product ID: {price.Product}");
    }

    private async Task CreateCardHolder()
    {
        StripeConfiguration.ApiKey
        = "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";

        var options = new Stripe.Issuing.CardholderCreateOptions
            {
                Type = "individual",
                Name = "Jenny Rosen",
                Email = "jenny.rosen@example.com",
                PhoneNumber = "+18888675309",
                Billing = new Stripe.Issuing.CardholderBillingOptions
                {
                    Address = new AddressOptions
                    {
                        Line1 = "1234 Main Street",
                        City = "San Francisco",
                        State = "CA",
                        Country = "US",
                        PostalCode = "94111",
                    },
                },
            };
        var service = new Stripe.Issuing.CardholderService();
        var result = await service.CreateAsync(options);

        cardHolderId = result.Id;
    }

    private async Task CreatePayMethod()
    {
        StripeConfiguration.ApiKey
        = "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";

        Console.WriteLine("Getting CreatePayMethod...");

        var options = new PaymentMethodCreateOptions
            {
                Type = "card",
                Card = new PaymentMethodCardOptions
                {
                    Number = "4242424242424242",
                    ExpMonth = 8,
                    ExpYear = 2026,
                    Cvc = "314",
                },
            };
        var service = new PaymentMethodService();
        var payMethodResult = await service.CreateAsync(options);

        await CreatePaymentIntent(payMethodResult.Id);
    }

    private async Task CreateCard()
    {
        StripeConfiguration.ApiKey
        = "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";

        var options = new Stripe.Issuing.CardCreateOptions
            {
                Cardholder = cardHolderId,
                Currency = "usd",
                Type = "virtual",
            };
        var service = new Stripe.Issuing.CardService();
        await service.CreateAsync(options);
    }

    private async Task CreateStripeSession()
    {
        StripeConfiguration.ApiKey =
        "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";

        var options = new Stripe.Checkout.SessionCreateOptions
            {
                SuccessUrl = "/sucess",
                LineItems = new List<Stripe.Checkout.SessionLineItemOptions>
    {
        new Stripe.Checkout.SessionLineItemOptions
        {
            Price = priceId,
            Quantity = 2,
        },
        },
         Mode = "payment",
        };
        var service = new Stripe.Checkout.SessionService();
        var result = await service.CreateAsync(options);

        priceId = result.Id;

        Console.WriteLine($"Session ID: {result.Id}");
        Console.WriteLine($"Session URL: {result.Url}");
    }

    private async Task CreatePaymentIntent(string payMethodId)
    {
        try
        {
            StripeConfiguration.ApiKey =
            "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";

            Console.WriteLine("Getting CreatePaymentIntent...");

            var options = new PaymentIntentCreateOptions
                {
                    Amount = 1000,
                    Currency = "usd",
                    PaymentMethod = payMethodId,

                    // AutomaticPaymentMethods = new PaymentIntentAutomaticPaymentMethodsOptions
                    // {
                    //     Enabled = true,
                    // },
                };
            var service = new PaymentIntentService();
            var paymentIntent = await service.CreateAsync(options);

            Console.WriteLine($"Amount: {paymentIntent.Amount}");
            Console.WriteLine($"Currency: {paymentIntent.Currency}");
            Console.WriteLine($"Status: {paymentIntent.Status}");
            Console.WriteLine($"Payment Method Types: {string.Join(", ", paymentIntent.PaymentMethodTypes)}");
            Console.WriteLine($"Client Secret: {paymentIntent.ClientSecret}");
            Console.WriteLine($"Description: {paymentIntent.Description}");
            Console.WriteLine($"Receipt Email: {paymentIntent.ReceiptEmail}");

        }
        catch (Exception e)
        {
            
            throw;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await jsRuntime.InvokeVoidAsync("initializeStripe");
        }
    }

    [JSInvokable]
    public async Task CreatePaymentIntentFromJS(string payMethodId)
    {
        await CreatePaymentIntent(payMethodId);
    }
}

<script>
    async function initializeStripe() {
        var stripe = Stripe('your-publishable-key');
        var elements = stripe.elements();
        var cardElement = elements.create('card');
        cardElement.mount('#card-element');

        document.querySelector('#payment-form').addEventListener('submit', async (event) => {
            event.preventDefault();
            const { paymentMethod, error } = await stripe.createPaymentMethod({
                type: 'card',
                card: cardElement,
            });

            if (error) {
                console.error(error);
                document.querySelector('#card-errors').textContent = error.message;
            } else {
                // Send paymentMethod.id to your server to create the PaymentIntent
                const response = await fetch('/api/payments/create-payment-intent', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ paymentMethodId: paymentMethod.id }),
                });

                const result = await response.json();
                if (result.error) {
                    console.error(result.error);
                    document.querySelector('#card-errors').textContent = result.error;
                } else {
                    console.log('Payment succeeded!');
                }
            }
        });
    }
</script>

