@page "/uploadfile"

@inject UploadFileService UploadFileService
@inject UploadedFilesListService UploadedFilesListService
@inject PDFToDataFromStreamService PDFToDataFromStreamService

@using Microsoft.AspNetCore.Components.Forms

<h3>Upload File V1.1</h3>

<div class="input-group mb-3">
    <label class="input-group-text" for="inputGroupFile01">Upload</label>
    <InputFile OnChange="HandleSelected" />
</div>

@if (!string.IsNullOrEmpty(UploadMessage)) { <p>@UploadMessage</p> } <hr />

<h5> Files: </h5>
@if (filesList != null)
{
    foreach (var item in filesList)
    {
        <p>@item</p>
    }
    <p> Total files: @filesList.Count </p>
    <p> @FilesListMessage </p>
    <hr />
}

@code {
    private string? UploadMessage { get; set; }
    private string? FilesListMessage { get; set; }

    private List<string> filesList = new List<string>();
    private bool isRendered = false;

    private async Task HandleSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        var response = await UploadFileService.UploadAsync(file);
        UploadMessage = "File uploaded successfully.";
        await RefreshFilesList();
        if (response.Data) await ProcessPDFToString(file.Name);
        else FilesListMessage = response.Message;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (filesList == null || !filesList.Any())
            {
                await RefreshFilesList();
            }
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task ProcessPDFToString(string fileName)
    {
        FilesListMessage = "Processing pdf data...";
        var response = await PDFToDataFromStreamService.CreatePDFDataAsync(fileName, "PDFDataName" + fileName);
        FilesListMessage = response.Message;
        StateHasChanged();
    }

    private async Task RefreshFilesList()
    {
        var result = await UploadedFilesListService.ExecuteAsync();
        if (result.Data?.FilePaths != null)
        {
            filesList = result.Data.FileNames;
            FilesListMessage = result.Message;
            StateHasChanged();
        }
    }
}
