@using BrunoTheBot.Blazor.Client.APIServices.Tests
@using BrunoTheBot.CoreBusiness.Entities.PDFData
@inject RemoveTestService RemoveTestService

<h4>
    @pdfData.Name
</h4>
<div class="bg-light p-2 b-2 mb-2">
    <h5>
        Tests
    </h5>
    <div class="container bg-light p-2 bb-4" style="background-color: dimgrey;">
        @foreach (var item in pdfData.Tests)
        {
            <div class="bb-5">
                <p>
                    <a href="/Games/Test/@item.Id" target="_blank">@item.Name.ToString() : @item.Questions.Count questions</a>
                    <button @onclick="() => RemoveTest(item.Id)">Remove</button>
                </p>
            </div>

        }
    </div>
</div>
@* 
<!-- Button trigger modal -->
<button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#staticBackdrop">
    Launch static backdrop modal
</button> *@

<!-- Modal -->
<div class="modal fade" id="staticBackdrop" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="staticBackdropLabel">Modal title</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                ...
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary">Understood</button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public PDFData pdfData { get; set; } = new PDFData();

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
    }

    public async void RemoveTest(Guid testId)
    {
        Console.WriteLine("DELETING...");

        await RemoveTestService.ExecuteAsync(testId);

        StateHasChanged();
    }
}
