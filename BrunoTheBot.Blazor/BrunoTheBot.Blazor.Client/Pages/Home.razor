@page "/"
@page "/API"

@using System.Text.Json
@using BrunoTheBot.CoreBusiness
@using CoreBusiness.Entities

@inject AILogService AILogService
@inject ChatGPTAPI ChatGPTAPI

<PageTitle>Home</PageTitle>

<textarea type="text" size="50000" style="width: 600px; height: 30vh;" @bind=inputAPI1 />
<button @onclick="GetChatGPTAPI">Get</button>

<h2>API Result:</h2>
<pre>
    @resultAPI
</pre>

@if(logs != null)
{
    foreach (var log in logs)
    {
        <p>@log.JSON</p> <!-- substitua PropertyName pelos nomes das propriedades de AILog -->
    }
}

@code {
    private string inputAPI1 = "";
    private string resultAPI = "no results yet.";
    private IEnumerable<AILog>? logs;

    protected override async Task OnInitializedAsync()
    {
        logs = await AILogService.GetAILogsAsync(); // obter os logs do serviço
    }

    private async Task GetChatGPTAPI()
    {
        Console.WriteLine("Retrieving ChatGPT API...");
        resultAPI = "Retrieving ChatGPT API...";
        resultAPI = await ChatGPTAPI.ChatWithGPT(inputAPI1);
        Console.WriteLine(resultAPI);

        if (!string.IsNullOrEmpty(resultAPI)) // Verifica se resultAPI não está vazio
        {
            await AILogService.CreateAILogAsync(new CoreBusiness.AILog
                {
                    JSON = resultAPI
                });
        }

        StateHasChanged();
    }
}