@using BrunoTheBot.Blazor.Client.APIServices.Responses
@using BrunoTheBot.Blazor.Client.APIServices.Shots
@using BrunoTheBot.CoreBusiness.Utils
@using BrunoTheBot.CoreBusiness.Entities.Quiz
@using BrunoTheBot.CoreBusiness.Entities.Quiz.DTO
@using Microsoft.AspNetCore.Components

@inject ShotsService ShotsService

@if (questionDTO != null)
{
    <h4>
        @(1 + Number) - @questionDTO.Question!.Name
    </h4>
    @foreach (var option in questionDTO.OptionsDTO)
    {
        <h6 @onclick="() => SelectOption(option)" class="option @(GetOptionClass(option))">
            @letters[questionDTO.OptionsDTO.IndexOf(option)] @option.Name
        </h6>
    }
}

@code
{
    [Parameter]
    public QuestionDTO? questionDTO { get; set; }
    [Parameter]
    public int Number { get; set; }
    [Parameter]
    public Guid responseGuid { get; set; }

    private bool _showResults;

    [Parameter]
    public bool ShowResults
    {
        get => _showResults;
        set
        {
            if (_showResults != value)
            {
                _showResults = value;
                OnShowResultsChanged();
            }
        }
    }

    private void OnShowResultsChanged()
    {
        // Lógica a ser executada quando ShowResults for alterado
    }

    private string[] letters = { "A)", "B)", "C)", "D)", "E)", "F)" };

    private string GetOptionClass(OptionDTO option)
    {
        if (ShowResults)
        {
            if (option.IsSelected && option.IsCorrect)
            {
                return "correct";
            }
            else if (option.IsSelected && !option.IsCorrect)
            {
                return "incorrect";
            }
            else if (!option.IsSelected && option.IsCorrect)
            {
                return "not-selected-correct";
            }
        }

        return option.IsSelected ? "selected" : "";
    }

    private async void SelectOption(OptionDTO selectedOption)
    {
        if (selectedOption.IsSelected || ShowResults) return;

        foreach (var regularOption in questionDTO!.OptionsDTO)
        {
            regularOption.IsSelected = (regularOption == selectedOption);
        }

        var deleteTasks = questionDTO.OptionsDTO
            .Where(opt => opt != selectedOption)
            .Select(opt => ShotsService.DeleteShotAsync(opt.Id, responseGuid))
            .Cast<Task>()
            .ToList();

        var createTask = ShotsService.CreateShotAsync(selectedOption.ConvertToShot(responseGuid));

        deleteTasks.Add(createTask);

        await Task.WhenAll(deleteTasks);
    }

    private async Task<Shot> GetShotById(Guid shotId)
    {
        try
        {
            var result = await ShotsService.GetShotByIdAsync(shotId);
            if (result.Status == CustomStatusCodes.ErrorStatus) throw new Exception("ERROR DURING GETTING SHOT");
            else if (result.Status == CustomStatusCodes.NotFound) return null!;
            else if (result.Status == CustomStatusCodes.SuccessStatus) return result.Data;
            return null!;
        }
        catch (Exception ex)
        {
            throw new Exception(ex.Message);
        }
    }

    private async Task RecoverShotsAsync()
    {
        var result = await ShotsService.GetShotsByResponseIdAsync(responseGuid);

        if (result.Status == CustomStatusCodes.SuccessStatus)
        {
            foreach (var option in questionDTO!.OptionsDTO)
            {
                foreach (var shot in result.Data)
                {
                    if (option.Id == shot.OptionId)
                    {
                        option.IsSelected = true;
                    }
                }
            }
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        await RecoverShotsAsync();
        await base.OnParametersSetAsync();
    }

}

<style>
    .option {
        cursor: pointer;
        padding: 10px;
        border: 1px solid #ccc;
    }

    .selected {
        background-color: #cce5ff;
        color: #004085;
    }

    .correct {
        border: 3px solid blue;
        background-color: #cce5ff;
        color: #004085;
    }

    .incorrect {
        border: 3px solid red;
        background-color: #f8d7da;
        color: #721c24;
    }

    .not-selected-correct {
        border: 3px solid blue;
    }
</style>
