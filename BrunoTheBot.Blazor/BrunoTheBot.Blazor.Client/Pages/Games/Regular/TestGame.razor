@page "/Games/Test/{TestId}"
@page "/Games/Test/"
@using BrunoTheBot.Blazor.Client.APIServices.RegularGame
@using BrunoTheBot.Blazor.Client.APIServices.Tests
@using BrunoTheBot.CoreBusiness.CodeEntities
@using BrunoTheBot.CoreBusiness.Entities.Exam
@using BrunoTheBot.CoreBusiness.Entities.Quiz
@using BrunoTheBot.CoreBusiness.Entities.Quiz.DTO
@using BrunoTheBot.Blazor.Client.Pages.Games.Components

@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Nav
@inject GetTestByIdService GetTestByIdService

<h2>@test.Name</h2>

@if(test.Questions != null)
{
    @foreach (var question in test.Questions)
    {
        QuestionDTO questionDTO = new QuestionDTO(question);
        <QuestionDTOComponent questionDTO="questionDTO"></QuestionDTOComponent>
        <hr>
    }
}

@code {
    [Parameter]
    public string TestId { get; set; } = "";
    [Parameter]
    public EventCallback<OptionDTO> OnNotify { get; set; }

    private Test test = new();

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            Guid testIdGuid;
            if (Guid.TryParse(TestId, out testIdGuid))
            {
                APIResponse<Test> testAPIReponse = new APIResponse<Test> { Data = new Test() };
                testAPIReponse = await GetTestByIdService.ExecuteAsync(testIdGuid);
                if (testAPIReponse.Status != CustomStatusCodes.SuccessStatus) throw new Exception("TestGame: Error during retrieving TestApiResponse");
                test = testAPIReponse.Data;
            }
            else
            {
                Nav.NavigateTo("", true);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred: {ex}");
            throw new Exception("An error occurred while processing the book. See inner exception for details.", ex);
        }

        await base.OnParametersSetAsync();
    }

    private bool isAuthenticated = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        isAuthenticated = authState.User.Identity?.IsAuthenticated ?? false;

        if (!isAuthenticated)
        {
            NavigationManager.NavigateTo("/pagina-de-login", true);
        }
    }
}