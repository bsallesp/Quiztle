@page "/Games/Test/{TestId}"
@page "/Games/Test/"
@using BrunoTheBot.Blazor.Client.APIServices.RegularGame
@using BrunoTheBot.Blazor.Client.APIServices.Tests
@using BrunoTheBot.CoreBusiness.Entities.Exam
@using BrunoTheBot.CoreBusiness.Entities.Quiz
@using BrunoTheBot.CoreBusiness.Entities.Quiz.DTO
@using BrunoTheBot.Blazor.Client.Pages.Games.Components

@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Nav
@inject GetTestByIdService GetTestByIdService

@* <p>
    count: @regularExam.Questions.Count
</p>
<p>
    answered: @regularExam.TotalQuestionsAnswered()
</p> *@

@* <h2>@testAPIReponse.Data.Name</h2>

@for (int i = 0; i < testAPIReponse.Data.Questions.Count; i++)
{
    var question = testAPIReponse.Data.Questions[i];
    <div class="container mb-4 mt-4 p-4 b-4" style="background-color: aliceblue;">
        <h5 class="mb-4">
            <b>
                @(i + 1) - @question.Name
            </b>
        </h5>

        <OptionsComponent OnNotify="SetShot" Options="question.GetShuffledAnswerAndOptions()"></OptionsComponent>
    </div>
}

@code {
    [Parameter]
    public string TestId { get; set; } = "";
    [Parameter]
    public EventCallback<ShotDTO> OnNotify { get; set; }

    APIResponse<Test> testAPIReponse = new APIResponse<Test> { Data = new Test() };
    private int pageCount = 1;
    private Response responses = new Response();

    private void SetShot(QuestionShotDTO newShot)
    {
        // responses.Questions.Add(new Question
        // {

        // });
    }

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            Guid testIdGuid;
            if (Guid.TryParse(TestId, out testIdGuid))
            {
                testAPIReponse = await GetTestByIdService.ExecuteAsync(testIdGuid);
            }
            else
            {
                Nav.NavigateTo("", true);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred: {ex}");
            throw new Exception("An error occurred while processing the book. See inner exception for details.", ex);
        }

        await base.OnParametersSetAsync();
    }

    private bool isAuthenticated = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        isAuthenticated = authState.User.Identity?.IsAuthenticated ?? false;

        if (!isAuthenticated)
        {
            NavigationManager.NavigateTo("/pagina-de-login", true);
        }
    }
} *@