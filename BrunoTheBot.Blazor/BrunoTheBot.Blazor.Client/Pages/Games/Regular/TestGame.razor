@page "/Games/Test/{TestId}"
@page "/Games/Test/"
@using BrunoTheBot.Blazor.Client.APIServices.RegularGame
@using BrunoTheBot.Blazor.Client.APIServices.Responses
@using BrunoTheBot.Blazor.Client.APIServices.Tests
@using BrunoTheBot.CoreBusiness.CodeEntities
@using BrunoTheBot.CoreBusiness.Entities.Exam
@using BrunoTheBot.CoreBusiness.Entities.Quiz
@using BrunoTheBot.CoreBusiness.Entities.Quiz.DTO
@using BrunoTheBot.Blazor.Client.Pages.Games.Components
@using BrunoTheBot.Services

@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Nav
@inject GetTestByIdService GetTestByIdService
@inject ResponsesService ResponsesService

@* @CheckRenderSide.GetOSDescription()
<hr />
@CheckRenderSide.GetOS() *@

@if (response != null)
{
    <div class="mb-4">
        <h2>@test.Name</h2>
        <h6>Response n:@response.Id - @response.Name</h6>

        @if (test.Questions != null)
        {
            @foreach (var question in test.Questions)
            {
                QuestionDTO questionDTO = new QuestionDTO(question);
                <QuestionDTOComponent ShowResults="_showResults" responseGuid="response.Id" questionDTO="questionDTO" Number="@test.Questions.IndexOf(question)"></QuestionDTOComponent>
                <hr />
            }
        }
        @if (!_showResults)
        {
            <button class="btn btn-primary w-100 d-flex align-items-center justify-content-center" @onclick="() => _showResults = true">
                <h3 class="mb-0">
                    Show Results
                </h3>
            </button>
        }
    </div>
}

@code {
    [Parameter]
    public string TestId { get; set; } = "";
    private Guid testGuid = new Guid();
    private Test test = new();
    private Response? response;
    private bool _showResults = false;

    protected override async Task OnParametersSetAsync()
    {
        await CheckURLTestGuid();
        if (!await CheckIfResponseExists()) await CreateResponse();
        await base.OnParametersSetAsync();
    }

    private async Task CheckURLTestGuid()
    {
        try
        {
            Guid testIdGuid;
            if (Guid.TryParse(TestId, out testIdGuid))
            {
                testGuid = Guid.Parse(TestId);
                var testAPIReponse = await GetTestByIdService.ExecuteAsync(testIdGuid);
                if (testAPIReponse.Status != CustomStatusCodes.SuccessStatus)
                    throw new Exception("TestGame: Error during retrieving TestApiResponse");

                test = testAPIReponse.Data;
                //test.ShuffleQuestions();
            }
            else
            {
                Nav.NavigateTo("/", true);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred: {ex}");
            throw new Exception("An error occurred while processing the book. See inner exception for details.", ex);
        }
    }

    private async Task<bool> CheckIfResponseExists()
    {
        var result = await ResponsesService.GetUnfinalizedResponseByTestIdAsync(testGuid);
        if (result.Status != CustomStatusCodes.SuccessStatus) return false;
        response = result.Data;
        return true;
    }

    private async Task<Response> CreateResponse()
    {
        Console.WriteLine("CreateResponse...");
        var newResponse = new Response
            {
                Name = RandomNames.GenerateConcatenatedNames(1),
                TestId = testGuid
            };

        await ResponsesService.CreateResponseAsync(newResponse);
        return await Task.FromResult(newResponse);
    }
}