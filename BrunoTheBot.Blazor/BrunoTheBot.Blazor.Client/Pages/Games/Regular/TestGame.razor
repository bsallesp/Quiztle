@page "/Games/Test/{TestId}"
@page "/Games/Test/"
@using BrunoTheBot.Blazor.Client.APIServices.RegularGame
@using BrunoTheBot.Blazor.Client.APIServices.Tests
@using BrunoTheBot.CoreBusiness.CodeEntities
@using BrunoTheBot.CoreBusiness.Entities.Exam
@using BrunoTheBot.CoreBusiness.Entities.Quiz
@using BrunoTheBot.CoreBusiness.Entities.Quiz.DTO
@using BrunoTheBot.Blazor.Client.Pages.Games.Components

@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Nav
@inject GetTestByIdService GetTestByIdService

<h2>@test.Name</h2>

@if (test.Questions != null)
{
    @foreach (var question in test.Questions)
    {
        QuestionDTO questionDTO = new QuestionDTO(question);
        <QuestionDTOComponent questionDTO="questionDTO" Number="@test.Questions.IndexOf(question)"></QuestionDTOComponent>
        <hr />
    }
}

@code {
    [Parameter]
    public string TestId { get; set; } = "";
    private Test test = new();
    private Response response = new Response();

    protected override async Task OnParametersSetAsync()
    {
        await CheckURLTestGuid();
        await base.OnParametersSetAsync();
    }

    private async Task CheckResponse()
    {
        
    }

    private async Task CheckURLTestGuid()
    {
        try
        {
            Guid testIdGuid;
            if (Guid.TryParse(TestId, out testIdGuid))
            {
                var testAPIReponse = await GetTestByIdService.ExecuteAsync(testIdGuid);
                if (testAPIReponse.Status != CustomStatusCodes.SuccessStatus)
                    throw new Exception("TestGame: Error during retrieving TestApiResponse");

                test = testAPIReponse.Data;
                test.ShuffleQuestions();
            }
            else
            {
                Nav.NavigateTo("/", true);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred: {ex}");
            throw new Exception("An error occurred while processing the book. See inner exception for details.", ex);
        }
    }

}
    // private bool isAuthenticated = false;

    // protected override async Task OnInitializedAsync()
    // {
    //     // var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
    //     // isAuthenticated = authState.User.Identity?.IsAuthenticated ?? false;

    //     // if (!isAuthenticated)
    //     // {
    //     //     NavigationManager.NavigateTo("/pagina-de-login", true);
    //     // }


    // }