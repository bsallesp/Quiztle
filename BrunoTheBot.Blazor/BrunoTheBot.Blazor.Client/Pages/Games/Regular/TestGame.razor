@page "/Games/Test/{TestId}"
@page "/Games/Test/"
@using BrunoTheBot.Blazor.Client.APIServices.RegularGame
@using BrunoTheBot.Blazor.Client.APIServices.Tests
@using BrunoTheBot.CoreBusiness.Entities.Exam
@using BrunoTheBot.CoreBusiness.Entities.Quiz
@using BrunoTheBot.CoreBusiness.Entities.Quiz.DTO
@using BrunoTheBot.Blazor.Client.Pages.Games.Components

@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Nav
@inject GetAllQuestionsToRegularGame GetAllQuestionsFromBookService
@inject GetTestByIdService GetTestByIdService

@* <p>
    count: @regularExam.Questions.Count
</p>
<p>
    answered: @regularExam.TotalQuestionsAnswered()
</p> *@


@* <FinishButtonComponent
    MissingQuestions=0
    Active="@(regularExam.AllQuestionsAnsweredy() ? true : false)">
</FinishButtonComponent> *@

<h1>Test your knowledge</h1>
@testAPIReponse.Data.Questions.Count

@foreach (var question in testAPIReponse.Data.Questions)
{
    <div class="container mb-4 mt-4 p-4 b-4" style="background-color: aliceblue;">
        <h5>
            <b>
                @question.Name
            </b>
        </h5>

        @foreach (var options in question.GetShuffledAnswerAndOptions())
        {
            @options
        }

    </div>
}

@code {
    [Parameter]
    public string TestId { get; set; } = "";
    APIResponse<Test> testAPIReponse = new APIResponse<Test>
        {
            Data = new Test()
        };

    QuestionComponent questionComponent = new();

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            Guid testIdGuid;
            if (Guid.TryParse(TestId, out testIdGuid))
            {
                testAPIReponse = await GetTestByIdService.ExecuteAsync(testIdGuid);
            }
            else
            {
                Nav.NavigateTo("", true);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred: {ex}");
            throw new Exception("An error occurred while processing the book. See inner exception for details.", ex);
        }

        await base.OnParametersSetAsync();
    }

    private bool isAuthenticated = false;

    protected override async Task OnInitializedAsync()
    {
        // Obter o estado de autenticação
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        // Verificar se o usuário está autenticado
        isAuthenticated = authState.User.Identity?.IsAuthenticated ?? false;
        Console.WriteLine("passou aqui");

        // Redirecionar para a página de login se o usuário não estiver autenticado
        if (!isAuthenticated)
        {
            NavigationManager.NavigateTo("/pagina-de-login", true);
        }
    }
}