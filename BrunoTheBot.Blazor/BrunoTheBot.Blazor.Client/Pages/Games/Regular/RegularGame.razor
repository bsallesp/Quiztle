@page "/Games/Regular/{bookId}"
@page "/Games/Regular/"

@inject GetAllQuestionsFromBookService GetAllQuestionsFromBookService

<h1>Test your knowledge</h1>
<h2>
    @bookAPIResponse.Book.Name
</h2>

@if (bookAPIResponse != null && bookAPIResponse.Book != null)
{
    foreach (var chapter in bookAPIResponse.Book.Chapters)
    {
        @foreach (var sectionObj in chapter.Sections)
        {
            @foreach (var question in sectionObj.Questions)
            {
                <div class="container m-4 p-4 b-4" style="background-color: aliceblue;">

                    <h5>
                        <b>
                            @question.Name

                        </b>
                    </h5>
                    <hr />
                    <p>
                        @foreach (var optionsList in question.GetShuffledAnswerAndOptions())
                        {
                            @optionsList
                            <hr />
                        }
                    </p>
                </div>
            }
        }
    }
}

@code {
    [Parameter]
    public string bookId { get; set; } = "";
    BookAPIResponse bookAPIResponse = new BookAPIResponse();

    private static Random rng = new Random();

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            int bookIdInt;
            if (int.TryParse(bookId, out bookIdInt))
            {
                bookAPIResponse = await GetAllQuestionsFromBookService.ExecuteAsync(bookIdInt);
                Console.WriteLine(bookAPIResponse.Book.Chapters[0].Sections[0].Content.Text);
            }
            else
            {
                Console.WriteLine("Erro: O ID do livro fornecido não é um número válido.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao executar GetAllQuestionsFromBookService: {ex.Message}");
        }

        await base.OnParametersSetAsync();
    }
}