@page "/Games/Test/{TestId}"
@page "/Games/Test/"
@using Quiztle.Blazor.Client.APIServices.RegularGame
@using Quiztle.Blazor.Client.APIServices.Responses
@using Quiztle.Blazor.Client.APIServices.Shots
@using Quiztle.Blazor.Client.APIServices.Tests
@using Quiztle.CoreBusiness.Utils
@using Quiztle.CoreBusiness.Entities.Exam
@using Quiztle.CoreBusiness.Entities.Quiz
@using Quiztle.CoreBusiness.Entities.Quiz.DTO
@using Quiztle.Blazor.Client.Pages.Games.Components

@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Nav
@inject GetTestByIdService GetTestByIdService
@inject ResponsesService ResponsesService
@inject ShotsService ShotsService

@if (response != null)
{
    <div class="mb-4">
        <h2>Test: @test.Name</h2>
        <h6>Current Response n:@response.Id - @response.Name</h6>
        <hr />

        @if (response.IsFinalized)
        {
            <h4>
                Score: @response.Score
            </h4>
            <hr />
        }

        @if (test.Questions != null)
        {
            @foreach (var question in test.Questions)
            {
                QuestionDTO questionDTO = new QuestionDTO(question);
                <QuestionDTOComponent ShowResults="ShowResults" responseGuid="response.Id" questionDTO="questionDTO" Number="@test.Questions.IndexOf(question)"></QuestionDTOComponent>
                <hr />
            }
        }
        @if (!ShowResults)
        {
            <button class="btn btn-primary w-100 d-flex align-items-center justify-content-center" @onclick="() => FinalizeTestResponse()">
                <h3 class="mb-0">
                    @_buttonText
                </h3>
            </button>
        }
    </div>
}

@code {
    [Parameter]
    public string TestId { get; set; } = "";
    private Guid testGuid = new Guid();
    private Test test = new();
    private Response? response;
    private bool _showResults = false;
    private string _buttonText = "FINALIZE IT";
    private List<Response> responsesList = [];

    public bool ShowResults
    {
        get => _showResults;
        set
        {
            if (_showResults != value)
            {
                _showResults = value;

            }
        }
    }

    private async Task<Response> ReloadResponse()
    {
        if (response == null) return new Response();

        var result = await ResponsesService.GetResponseByIdAsync(response!.Id);
        return await Task.FromResult(result.Data);
    }

    private async Task FinalizeTestResponse()
    {
        try
        {
            ShowResults = true;

            if (response == null)
            {
                Console.WriteLine("Response is null.");
                return;
            }

            Console.WriteLine("Reloading response...");
            response = await ReloadResponse();
            Console.WriteLine("Response reloaded with ID: " + response.Id);

            var shotsResult = await ShotsService.GetShotsByResponseIdAsync(response.Id);
            Console.WriteLine("Shots received: " + shotsResult.Data.Count);

            if (shotsResult.Data.Count < test.Questions.Count)
            {
                Console.WriteLine("response.Shots.Count < test.Questions.Count? not enough: " + shotsResult.Data.Count + " / " + test.Questions.Count);
                _buttonText = "Respond all questions then finalize the test.";
                ShowResults = false;
                return;
            }

            var score = 0;
            var correctOptions = test.Questions
                                     .SelectMany(q => q.Options)
                                     .Where(o => o.IsCorrect)
                                     .ToList();

            Console.WriteLine("Correct options count: " + correctOptions.Count);

            foreach (var correctOption in correctOptions)
            {
                foreach (var shot in shotsResult.Data)
                {
                    Console.WriteLine("Checking shot.OptionId: " + shot.OptionId + " against correctOption.Id: " + correctOption.Id);

                    if (shot.OptionId == correctOption.Id)
                    {
                        score++;
                        Console.WriteLine("Score incremented: " + score);
                    }
                }
            }

            response.Score = score;
            response.Percentage = (decimal)((double)score / shotsResult.Data.Count) * 100;
            response.IsFinalized = true;

            Console.WriteLine("Final score: " + score);
            Console.WriteLine("Final percentage: " + response.Percentage);

            var responseResponse = await ResponsesService.UpdateResponseAsync(response.Id, response);
            response = responseResponse.Data;

            Console.WriteLine("Response finalized.");
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error: " + ex.Message);
        }
    }


    protected override async Task OnParametersSetAsync()
    {
        await CheckURLTestGuid();
        if (!await CheckIfPendentResponseExists()) await CreateResponse();
        await GetPastResponses();
        await base.OnParametersSetAsync();
    }

    private async Task GetPastResponses()
    {
        var result = await ResponsesService.GetFinalizedResponsesAsync(testGuid);
        responsesList = result.Data;
    }

    private async Task CheckURLTestGuid()
    {
        try
        {
            Guid testIdGuid;
            if (Guid.TryParse(TestId, out testIdGuid))
            {
                testGuid = Guid.Parse(TestId);
                var testAPIReponse = await GetTestByIdService.ExecuteAsync(testIdGuid);
                if (testAPIReponse.Status != CustomStatusCodes.SuccessStatus)
                    throw new Exception("TestGame: Error during retrieving TestApiResponse");

                test = testAPIReponse.Data;
            }
            else
            {
                Nav.NavigateTo("/PDFDataManager", true);
            }
        }
        catch (Exception ex)
        {
            
            Nav.NavigateTo("/PDFDataManager", true);
        }
    }

    private async Task<bool> CheckIfPendentResponseExists()
    {
        var result = await ResponsesService.GetUnfinalizedResponseByTestIdAsync(testGuid);
        if (result.Status != CustomStatusCodes.SuccessStatus) return false;
        response = result.Data;
        return true;
    }

    private async Task<Response> CreateResponse()
    {
        var newResponse = new Response
            {
                Name = RandomNames.GenerateConcatenatedNames(1),
                TestId = testGuid
            };

        await ResponsesService.CreateResponseAsync(newResponse);
        return await Task.FromResult(newResponse);
    }
}