@page "/Games/Arcade/{TestId}"

@using Quiztle.Blazor.Client.Pages.Games.Components
@using Quiztle.CoreBusiness.Entities.Quiz.DTO
@using Quiztle.CoreBusiness.Utils

<div>
    @if (_testDTO.QuestionsDTO != null)
    {
        <h1>@_testDTO.Name</h1>

        @foreach (var questionDTO in _testDTO.QuestionsDTO)
        {
            <div style="background-color: whitesmoke;">
                <QuestionDTOArcadeComponent ShowResults="ShowResults" questionDTO="questionDTO" Number="@_testDTO.QuestionsDTO.IndexOf(questionDTO)"></QuestionDTOArcadeComponent>
            </div>
            <hr />
        }
    }
    <div class="fixed-bottom-container">
        @if (!ShowResults)
        {
            <button class="btn btn-primary w-100 d-flex align-items-center justify-content-center" @onclick="() => FinalizeTestResponse()">
                <h3 class="mb-0">
                    @_buttonText
                </h3>
            </button>
        }
        @if (ShowResults)
        {
            <div style="background-color: mintcream;">
                <h4>
                    You got @_testDTO.GetTotalCorrectAnswers() out of @_testDTO.QuestionsDTO!.Count questions correct!

                </h4>
            </div>
        }
    </div>
</div>

@code {
    private int _totalSelectedAnswers = 0;

    [Parameter]
    public string TestId { get; set; } = "";

    private TestDTO _testDTO = new();
    private Response? _response;
    private Guid _testGuid = new Guid();
    private string _buttonText = "FINISH";

    private bool _showResults = false;
    public bool ShowResults
    {
        get => _showResults;
        set
        {
            if (_showResults != value)
            {
                _showResults = value;
            }
        }
    }

    private void FinalizeTestResponse()
    {
        if (IsAllQuestionsAnswered()) ShowResults = true;
        if (!IsAllQuestionsAnswered()) _buttonText = "Answer all questions and Finalize";
    }

    private bool IsAllQuestionsAnswered()
    {
        Console.WriteLine(_testDTO.QuestionsDTO.Count);
        Console.WriteLine(_testDTO.GetTotalSelectedAnswers());

        if (_testDTO.QuestionsDTO.Count == _testDTO.GetTotalSelectedAnswers()) return true;
        return false;
    }

    protected override async Task OnParametersSetAsync()
    {
        await CheckURLTestGuid();
        await base.OnParametersSetAsync();
    }
    private async Task CheckURLTestGuid()
    {
        try
        {
            Guid testIdGuid;
            if (Guid.TryParse(TestId, out testIdGuid))
            {
                _testGuid = Guid.Parse(TestId);
                var testAPIReponse = await GetTestByIdService.ExecuteAsync(testIdGuid);
                if (testAPIReponse.Status != CustomStatusCodes.SuccessStatus)
                    throw new Exception("TestGame: Error during retrieving TestApiResponse");

                _testDTO.FromTest(testAPIReponse.Data);
            }
            else
            {
                Nav.NavigateTo("/PDFDataManager", true);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            Nav.NavigateTo("/PDFDataManager", true);
        }
    }
}

<style>
    .fixed-bottom-container {
        position: fixed;
        bottom: 0;
        left: 0;
        width: 100%;
        padding: 10px; /* Ajuste conforme necessário para o espaçamento */
        background-color: #fff; /* Opcional: Adiciona um fundo branco para o botão */
        box-shadow: 0 -2px 5px rgba(0, 0, 0, 0.1); /* Opcional: Adiciona uma sombra para destaque */
    }

    .btn {
        border-radius: 0; /* Opcional: Remove a borda arredondada para um estilo mais reto */
    }

</style>