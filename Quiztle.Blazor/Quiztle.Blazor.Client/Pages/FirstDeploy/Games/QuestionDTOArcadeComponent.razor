@using Quiztle.Blazor.Client.APIServices.Responses
@using Quiztle.Blazor.Client.APIServices.Shots
@using Quiztle.CoreBusiness.Utils
@using Quiztle.CoreBusiness.Entities.Quiz
@using Quiztle.CoreBusiness.Entities.Quiz.DTO
@using Microsoft.AspNetCore.Components

@inject UpdateQuestionService UpdateQuestionService
@inject RemoveQuestionService RemoveQuestionService
@rendermode InteractiveAuto

<div style="margin-bottom:25px;margin-top:25px; background-color: whitesmoke;">
    @if (questionDTO != null)
    {
        @* @questionDTO!.Question!.Id *@

        <h4 style="padding: 10px;">
            @(1 + Number) - @questionDTO.Question!.Name
        </h4>

        @foreach (var option in questionDTO.OptionsDTO)
        {
            <h6 @onclick="() => SelectOption(option)" class="option @GetOptionStyle(option)">
                @letters[questionDTO.OptionsDTO.IndexOf(option)] @option.Name
            </h6>
        }
    }

    @if (_showTips)
    {
        <div>
            @questionDTO!.Question!.Hint
            <hr />
            @questionDTO.Question.Resolution
        </div>
    }

    <button class="btn btn-primary w-100 d-flex align-items-center justify-content-center"
            @onclick="() => ShowTips()"
            style="background-color: antiquewhite">
        <h3 class="mb-0">
            Show Tips
        </h3>
    </button>

    @if (Admin)
    {
        <input class="btn btn-primary w-100 d-flex align-items-center justify-content-center" style="font-size: 30px" type="number" @bind="_rate" />
        <button class="btn btn-primary w-100 d-flex align-items-center justify-content-center"
                @onclick="() => RateIt()"
                style="background-color: lightgreen">
            <h3 class="mb-0">
                Rate
            </h3>
        </button>
        <button class="btn btn-primary w-100 d-flex align-items-center justify-content-center"
                @onclick="() => DeleteQuestion()"
                style="background-color: red">
            <h3 class="mb-0">
                Delete
            </h3>
        </button>
    }
</div>
@code
{
    [Parameter]
    public QuestionDTO? questionDTO { get; set; }
    [Parameter]
    public int Number { get; set; }
    [Parameter]
    public Guid responseGuid { get; set; }
    [Parameter]
    public bool Admin { get; set; } = false;

    private bool _showTips;

    private int _rate;

    private bool _showResults;
    private HashSet<Guid> _selectedOptionIds = new HashSet<Guid>();

    [Parameter]
    public bool ShowResults
    {
        get => _showResults;
        set
        {
            if (_showResults != value)
            {
                _showResults = value;
                if (_showResults)
                {
                    PreserveSelections();
                }
            }
        }
    }

    private void ShowTips()
    {
        _showTips = !_showTips;
    }

    private async void DeleteQuestion()
    {
        var id = questionDTO!.Question!.Id;
        Console.WriteLine(id);

        questionDTO.Question.Rate = _rate;
        Console.WriteLine("New Rate: " + _rate);

        var update = await RemoveQuestionService.ExecuteAsync(id);

        Console.WriteLine(update.Data);
    }

    private async void RateIt()
    {
        var id = questionDTO!.Question!.Id;
        Console.WriteLine(id);

        questionDTO.Question.Rate = _rate;
        Console.WriteLine("New Rate: " + _rate);

        var update = await UpdateQuestionService.ExecuteAsync(id, questionDTO.Question);

        Console.WriteLine(update.Data);
    }

    private string[] letters = { "A)", "B)", "C)", "D)", "E)", "F)" };

    protected override Task OnParametersSetAsync()
    {

        return base.OnParametersSetAsync();
    }

    protected override Task OnInitializedAsync()
    {
        // questionDTO!.ShuffleOptions();
        if (questionDTO != null) _rate = questionDTO.Question!.Rate;
        return base.OnInitializedAsync();
    }

    private void PreserveSelections()
    {
        _selectedOptionIds.Clear();
        foreach (var option in questionDTO!.OptionsDTO.Where(o => o.IsSelected))
        {
            _selectedOptionIds.Add(option.Id);
        }
    }

    private string GetOptionStyle(OptionDTO option)
    {
        if (ShowResults)
        {
            if (_selectedOptionIds.Contains(option.Id) && option.IsCorrect)
            {
                return "correct";
            }
            if (_selectedOptionIds.Contains(option.Id) && !option.IsCorrect)
            {
                return "incorrect";
            }
            if (!_selectedOptionIds.Contains(option.Id) && option.IsCorrect)
            {
                return "not-selected-correct";
            }
        }
        return _selectedOptionIds.Contains(option.Id) ? "selected" : "";
    }

    private void SelectOption(OptionDTO selectedOption)
    {
        if (ShowResults) return;
        UnselectAll();
        selectedOption.IsSelected = true;
        _selectedOptionIds.Add(selectedOption.Id);
    }

    private void UnselectAll()
    {
        foreach (var option in questionDTO!.OptionsDTO)
        {
            option.IsSelected = false;
        }
        _selectedOptionIds.Clear();
    }
}

<style>
    .option {
        cursor: pointer;
        padding: 10px;
        border: 1px solid #ccc;
    }

    .selected {
        background-color: #cce5ff;
        color: #004085;
    }

    .correct {
        border: 3px solid blue;
        background-color: #cce5ff;
        color: #004085;
    }

    .incorrect {
        border: 3px solid red;
        background-color: #f8d7da;
        color: #721c24;
    }

    .not-selected-correct {
        border: 3px solid blue;
    }
</style>