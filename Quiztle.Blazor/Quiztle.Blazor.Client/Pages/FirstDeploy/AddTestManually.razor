@page "/AddTest"
@using Quiztle.CoreBusiness.Entities.PDFData

<h3>
    Add Test Manually
</h3>
@_error

<form @onsubmit="Submit">
    <label for="campo-grande"></label>
    <textarea id="campo-grande" class="input-grande" placeholder="Type..." @bind="jsonInput"></textarea>
    <br><br>
    <input type="submit" value="Submit">
</form>

@if (_tests != null)
{
    foreach (var item in _tests)
    {
        <h5>
            @item.Name
        </h5>
    }
}


@code {
    private string jsonInput = string.Empty;
    private List<Test> _tests = new List<Test>();
    private string _error = "";

    private async Task Submit()
    {
        try
        {
            var test = JsonConvert.DeserializeObject<Test>(jsonInput);
            if (test == null) return;
            test.PDFDataId = null;

            Console.WriteLine(test.Questions.Count);
            Console.WriteLine(test.Name);

            if (test != null)
            {
                Console.WriteLine("Creating Test in CreateTestService.ExecuteAsync...");
                var response = await CreateTestService.ExecuteAsync(test);

                // foreach(var item in test!.Questions)
                // {
                //     Console.WriteLine(item.Name);
                //     foreach(var item2 in item.Options)
                //     {
                //         Console.WriteLine(item2.Name);
                //     }
                // }

                _error = response.Message;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("catch (Exception ex) in AddTestManually...");
            _error = ex.ToString();
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var result = await GetAllTestsService.ExecuteAsync();
            result.Data = _tests;

            Console.WriteLine(_tests.Count);

            _error = result.Message;
            Console.WriteLine(_tests.Count);
            await base.OnInitializedAsync();
        }
        catch (Exception ex)
        {
            _error = ex.ToString();
            throw;
        }
    }
}

<style>
    .input-grande {
        width: 100%;
        height: 400px;
        padding: 15px;
        font-size: 18px;
        border: 1px solid #ccc;
        border-radius: 4px;
        box-sizing: border-box;
    }
</style>


@* 


{
  "Name": "Azure AZ-900 Hard Level Practice Test",
  "Questions": [
    {
      "Name": "What is the primary purpose of the Azure Policy initiative?",
      "Options": [
        {
          "Name": "To enforce organizational standards and assess compliance at-scale",
          "IsCorrect": true,
        },
        {
          "Name": "To provide recommendations for optimizing resources",
          "IsCorrect": false,
        },
        {
          "Name": "To monitor security threats and vulnerabilities",
          "IsCorrect": false,
        },
        {
          "Name": "To manage costs across multiple subscriptions",
          "IsCorrect": false,
        }
      ],
      "Hint": "Think about compliance and governance.",
      "Resolution": "Azure Policy is used to enforce organizational standards and assess compliance at-scale.",
    },
 {
      "Name": "What is the primary purpose of the Azure Policy initiative?",
      "Options": [
        {
          "Name": "To enforce organizational standards and assess compliance at-scale",
          "IsCorrect": true,
        },
        {
          "Name": "To provide recommendations for optimizing resources",
          "IsCorrect": false,
        },
        {
          "Name": "To monitor security threats and vulnerabilities",
          "IsCorrect": false,
        },
        {
          "Name": "To manage costs across multiple subscriptions",
          "IsCorrect": false,
        }
      ],
      "Hint": "Think about compliance and governance.",
      "Resolution": "Azure Policy is used to enforce organizational standards and assess compliance at-scale.",
    },
 {
      "Name": "What is the primary purpose of the Azure Policy initiative?",
      "Options": [
        {
          "Name": "To enforce organizational standards and assess compliance at-scale",
          "IsCorrect": true,
        },
        {
          "Name": "To provide recommendations for optimizing resources",
          "IsCorrect": false,
        },
        {
          "Name": "To monitor security threats and vulnerabilities",
          "IsCorrect": false,
        },
        {
          "Name": "To manage costs across multiple subscriptions",
          "IsCorrect": false,
        }
      ],
      "Hint": "Think about compliance and governance.",
      "Resolution": "Azure Policy is used to enforce organizational standards and assess compliance at-scale.",
    },
]
}


observe essa estrutura e vamos utilizar para fazer 10 perguntas sobre Devops. aproveite a mesma estrutura, escreva tudo em ingles. elabore conteudo capcioso, e perguntas que fazem pegadinha. ao mesmo tempo, o conteudo eh profissional. de forma que promove a curiosidade de quem esta lendo, uma charada interessante. irreverente e ao mesmo tempo respeitosa e profissional.


  *@