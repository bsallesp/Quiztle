@page "/register"
@using Microsoft.AspNetCore.Components.Authorization
@using Quiztle.Blazor.Client.APIServices
@using Quiztle.Blazor.Client.Authentication.Core
@using Quiztle.Blazor.Client.Utils
@using Quiztle.CoreBusiness
@using Quiztle.CoreBusiness.Utils
@using Microsoft.AspNetCore.Authorization

@inject CreateUserService CreateUserService
@inject GetUserByEmailService GetUserByEmailService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject DefaultAuthenticationStateProvider DefaultAuthenticationStateProvider


@inject NavigationManager NavigationManager

<AuthorizeView>
    <Authorized>
        <RedirectPageComponent address="/profile" force="false"></RedirectPageComponent>
    </Authorized>

    <NotAuthorized>

    </NotAuthorized>
</AuthorizeView>

<div class="container">
    <div class="display-5">
        Register
    </div>

    <input type="email" id="email" name="email" placeholder="Email" @bind-value="_userEmail" @bind-value:event="oninput">


@*     <div class="forgot-links">
        Forgot my email
    </div> *@

    <input type="password"
        id="password"
        name="password"
        placeholder="password"
           @bind="_userPass">

@*     <div class="forgot-links">
        Forgot my password
    </div> *@


    <button @onclick=Submit>
        Submit
        </button>

    @if (_showError)
    {
        <div class="error-display">
            @_errorMessage
        </div>
    }

    <button class="google-button" disabled>
    
        <img src="/svg/google.png"/>
        Register with google (coming soon)
        
    </button>
    <hr>
    <button @onclick="GoToLogin" class="div-login-link">Already registered? Login</button>
</div>

@code{
    private string _userEmail = "bsallesp@gmail.com";
    private string _userPass = "";
    private bool _showError = false;
    private string _errorMessage = "";

    private User _newUser = new();

    protected override Task OnInitializedAsync()
    {


        return base.OnInitializedAsync();
    }

    private void GoToLogin()
    {
        Console.WriteLine("GoToLogin");
        NavigationManager.NavigateTo("/login", false);
    }

    private async Task Submit()
    {
        if (await SafeChecks()) AuthenticateHim();
    }

    private void AuthenticateHim()
    {
        DefaultAuthenticationStateProvider.SetCurrentUser(_newUser);
    }

    private async Task<bool> SafeChecks()
    {
        if (!IsValidFormat()) return false;

        if (await EmailExists()) return false;

        if (!await RegisterUser()) return false;

        return true;
    }

    private async Task<bool> LoginIntegrityTest()
    {
        var user = await GetUserByEmailService.ExecuteAsync(_userEmail);
        if (user.Data.ValidateCredentials(_userEmail, _userPass)) return true;
        else return false;
    }

    private async Task<bool> RegisterUser()
    {
        _newUser = new User
        {
            Email = _userEmail.ToLower(), 
            Password = _userPass,
            Role = Roles.RegularUser,
        };

        var result = await CreateUserService.ExecuteAsync(_newUser);

        if (result.Status != CustomStatusCodes.SuccessStatus)
        {
            ReturnError("An error occured during registering user.");
            return false;
        } 
        return true;
    }

    private bool IsValidFormat()
    {
        var result = Validator.IsValidEmailAndPassword(_userEmail, _userPass);

        var emailValidation = result[0];
        var passwordValidation = result[1];

        if ((bool)emailValidation["isValid"] && (bool)passwordValidation["isValid"])
        {
            return true;
        }

        var errors = new List<string>();

        if (!(bool)emailValidation["isValid"])
        {
            errors.Add((string)emailValidation["error"]);
        }

        if (!(bool)passwordValidation["isValid"])
        {
            errors.Add((string)passwordValidation["error"]);
        }

        if (errors.Count > 0)
        {
            ReturnError(string.Join("\n", errors));
        }

        return false;
    }

    private async Task<bool> EmailExists()
    {
        var oldUserResult = await GetUserByEmailService.ExecuteAsync(_userEmail);
        if (oldUserResult.Status == CustomStatusCodes.SuccessStatus)
        {
            ReturnError("It looks like you may already be registered. Please check your email inbox for further instructions, or try resetting your password.");
            return true;

        }

        return false;
    }

    private void ReturnError(string error)
    {
        _errorMessage = error;
        _showError = true;
    }

    private void CleanError()
    {
        _errorMessage = "";
        _showError = false;
    }
}